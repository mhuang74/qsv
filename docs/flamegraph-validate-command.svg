<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="10000" height="550" onload="init(evt)" viewBox="0 0 10000 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="9890" y="24.00">Search</text><text id="matched" x="9890" y="533.00"> </text><svg id="frames" x="10" width="9980" total_samples="160502"><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (38 samples, 0.02%)</title><rect x="0.0031%" y="469" width="0.0237%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="38"/><text x="0.0331%" y="479.50"></text></g><g><title>&lt;jsonschema::paths::JSONPointer as core::clone::Clone&gt;::clone (45 samples, 0.03%)</title><rect x="0.0318%" y="469" width="0.0280%" height="15" fill="rgb(217,0,24)" fg:x="51" fg:w="45"/><text x="0.0618%" y="479.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (327 samples, 0.20%)</title><rect x="0.0654%" y="453" width="0.2037%" height="15" fill="rgb(221,193,54)" fg:x="105" fg:w="327"/><text x="0.0954%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (2,220 samples, 1.38%)</title><rect x="0.2692%" y="453" width="1.3832%" height="15" fill="rgb(248,212,6)" fg:x="432" fg:w="2220"/><text x="0.2992%" y="463.50">&lt;alloc::string::S..</text></g><g><title>&lt;core::iter::sources::empty::Empty&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.01%)</title><rect x="1.6561%" y="453" width="0.0150%" height="15" fill="rgb(208,68,35)" fg:x="2658" fg:w="24"/><text x="1.6861%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::enum_::EnumValidator as jsonschema::validator::Validate&gt;::validate (108 samples, 0.07%)</title><rect x="1.6723%" y="453" width="0.0673%" height="15" fill="rgb(232,128,0)" fg:x="2684" fg:w="108"/><text x="1.7023%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::max_length::MaxLengthValidator as jsonschema::validator::Validate&gt;::validate (134 samples, 0.08%)</title><rect x="1.7395%" y="453" width="0.0835%" height="15" fill="rgb(207,160,47)" fg:x="2792" fg:w="134"/><text x="1.7695%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::maximum::MaximumU64Validator as jsonschema::validator::Validate&gt;::validate (30 samples, 0.02%)</title><rect x="1.8324%" y="453" width="0.0187%" height="15" fill="rgb(228,23,34)" fg:x="2941" fg:w="30"/><text x="1.8624%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::min_length::MinLengthValidator as jsonschema::validator::Validate&gt;::validate (79 samples, 0.05%)</title><rect x="1.8511%" y="453" width="0.0492%" height="15" fill="rgb(218,30,26)" fg:x="2971" fg:w="79"/><text x="1.8811%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::properties::PropertiesValidator as jsonschema::validator::Validate&gt;::apply (116 samples, 0.07%)</title><rect x="1.9140%" y="453" width="0.0723%" height="15" fill="rgb(220,122,19)" fg:x="3072" fg:w="116"/><text x="1.9440%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::required::RequiredValidator as jsonschema::validator::Validate&gt;::validate (25 samples, 0.02%)</title><rect x="1.9863%" y="453" width="0.0156%" height="15" fill="rgb(250,228,42)" fg:x="3188" fg:w="25"/><text x="2.0163%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::type_::MultipleTypesValidator as jsonschema::validator::Validate&gt;::validate (48 samples, 0.03%)</title><rect x="2.0018%" y="453" width="0.0299%" height="15" fill="rgb(240,193,28)" fg:x="3213" fg:w="48"/><text x="2.0318%" y="463.50"></text></g><g><title>&lt;jsonschema::paths::JSONPointer as core::clone::Clone&gt;::clone (343 samples, 0.21%)</title><rect x="2.0318%" y="453" width="0.2137%" height="15" fill="rgb(216,20,37)" fg:x="3261" fg:w="343"/><text x="2.0618%" y="463.50">&lt;..</text></g><g><title>&lt;jsonschema::paths::JSONPointer as core::fmt::Display&gt;::fmt (2,365 samples, 1.47%)</title><rect x="2.2455%" y="453" width="1.4735%" height="15" fill="rgb(206,188,39)" fg:x="3604" fg:w="2365"/><text x="2.2755%" y="463.50">&lt;jsonschema::paths..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (262 samples, 0.16%)</title><rect x="3.7190%" y="453" width="0.1632%" height="15" fill="rgb(217,207,13)" fg:x="5969" fg:w="262"/><text x="3.7490%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (25 samples, 0.02%)</title><rect x="3.8834%" y="453" width="0.0156%" height="15" fill="rgb(231,73,38)" fg:x="6233" fg:w="25"/><text x="3.9134%" y="463.50"></text></g><g><title>_mi_deferred_free (131 samples, 0.08%)</title><rect x="3.9003%" y="453" width="0.0816%" height="15" fill="rgb(225,20,46)" fg:x="6260" fg:w="131"/><text x="3.9303%" y="463.50"></text></g><g><title>_mi_heap_delayed_free (159 samples, 0.10%)</title><rect x="3.9819%" y="453" width="0.0991%" height="15" fill="rgb(210,31,41)" fg:x="6391" fg:w="159"/><text x="4.0119%" y="463.50"></text></g><g><title>_mi_heap_realloc_zero (142 samples, 0.09%)</title><rect x="4.0809%" y="453" width="0.0885%" height="15" fill="rgb(221,200,47)" fg:x="6550" fg:w="142"/><text x="4.1109%" y="463.50"></text></g><g><title>_mi_malloc_generic (174 samples, 0.11%)</title><rect x="4.1694%" y="453" width="0.1084%" height="15" fill="rgb(226,26,5)" fg:x="6692" fg:w="174"/><text x="4.1994%" y="463.50"></text></g><g><title>_mi_page_free_collect (122 samples, 0.08%)</title><rect x="4.2778%" y="453" width="0.0760%" height="15" fill="rgb(249,33,26)" fg:x="6866" fg:w="122"/><text x="4.3078%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (499 samples, 0.31%)</title><rect x="4.3588%" y="453" width="0.3109%" height="15" fill="rgb(235,183,28)" fg:x="6996" fg:w="499"/><text x="4.3888%" y="463.50">al..</text></g><g><title>bytecount::num_chars (175 samples, 0.11%)</title><rect x="4.6703%" y="453" width="0.1090%" height="15" fill="rgb(221,5,38)" fg:x="7496" fg:w="175"/><text x="4.7003%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (438 samples, 0.27%)</title><rect x="4.7819%" y="453" width="0.2729%" height="15" fill="rgb(247,18,42)" fg:x="7675" fg:w="438"/><text x="4.8119%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;mio::event::event::Event as core::fmt::Debug&gt;::fmt::EventDetails&gt; (77 samples, 0.05%)</title><rect x="5.0566%" y="453" width="0.0480%" height="15" fill="rgb(241,131,45)" fg:x="8116" fg:w="77"/><text x="5.0866%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (71 samples, 0.04%)</title><rect x="5.1077%" y="453" width="0.0442%" height="15" fill="rgb(249,31,29)" fg:x="8198" fg:w="71"/><text x="5.1377%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::Annotations&gt;&gt; (92 samples, 0.06%)</title><rect x="5.1526%" y="453" width="0.0573%" height="15" fill="rgb(225,111,53)" fg:x="8270" fg:w="92"/><text x="5.1826%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (269 samples, 0.17%)</title><rect x="5.2105%" y="453" width="0.1676%" height="15" fill="rgb(238,160,17)" fg:x="8363" fg:w="269"/><text x="5.2405%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (174 samples, 0.11%)</title><rect x="5.3787%" y="453" width="0.1084%" height="15" fill="rgb(214,148,48)" fg:x="8633" fg:w="174"/><text x="5.4087%" y="463.50"></text></g><g><title>core::str::converts::from_utf8 (52 samples, 0.03%)</title><rect x="5.4872%" y="453" width="0.0324%" height="15" fill="rgb(232,36,49)" fg:x="8807" fg:w="52"/><text x="5.5172%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (37 samples, 0.02%)</title><rect x="5.5358%" y="453" width="0.0231%" height="15" fill="rgb(209,103,24)" fg:x="8885" fg:w="37"/><text x="5.5658%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (79 samples, 0.05%)</title><rect x="5.5588%" y="453" width="0.0492%" height="15" fill="rgb(229,88,8)" fg:x="8922" fg:w="79"/><text x="5.5888%" y="463.50"></text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (1,275 samples, 0.79%)</title><rect x="5.6217%" y="453" width="0.7944%" height="15" fill="rgb(213,181,19)" fg:x="9023" fg:w="1275"/><text x="5.6517%" y="463.50">jsonschem..</text></g><g><title>mi_free (18 samples, 0.01%)</title><rect x="6.4211%" y="453" width="0.0112%" height="15" fill="rgb(254,191,54)" fg:x="10306" fg:w="18"/><text x="6.4511%" y="463.50"></text></g><g><title>mi_malloc (26 samples, 0.02%)</title><rect x="6.4323%" y="453" width="0.0162%" height="15" fill="rgb(241,83,37)" fg:x="10324" fg:w="26"/><text x="6.4623%" y="463.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (185 samples, 0.12%)</title><rect x="6.4498%" y="453" width="0.1153%" height="15" fill="rgb(233,36,39)" fg:x="10352" fg:w="185"/><text x="6.4798%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (292 samples, 0.18%)</title><rect x="6.5663%" y="453" width="0.1819%" height="15" fill="rgb(226,3,54)" fg:x="10539" fg:w="292"/><text x="6.5963%" y="463.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (580 samples, 0.36%)</title><rect x="6.7482%" y="453" width="0.3614%" height="15" fill="rgb(245,192,40)" fg:x="10831" fg:w="580"/><text x="6.7782%" y="463.50">ser..</text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt; for serde_json::value::Value&gt;::from (19 samples, 0.01%)</title><rect x="7.1096%" y="453" width="0.0118%" height="15" fill="rgb(238,167,29)" fg:x="11411" fg:w="19"/><text x="7.1396%" y="463.50"></text></g><g><title>[anon] (11,341 samples, 7.07%)</title><rect x="0.0648%" y="469" width="7.0660%" height="15" fill="rgb(232,182,51)" fg:x="104" fg:w="11341"/><text x="0.0948%" y="479.50">[anon]</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (50 samples, 0.03%)</title><rect x="7.1308%" y="453" width="0.0312%" height="15" fill="rgb(231,60,39)" fg:x="11445" fg:w="50"/><text x="7.1608%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (799 samples, 0.50%)</title><rect x="7.1663%" y="453" width="0.4978%" height="15" fill="rgb(208,69,12)" fg:x="11502" fg:w="799"/><text x="7.1963%" y="463.50">alloc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::ErrorDescription&gt;&gt;&gt; (71 samples, 0.04%)</title><rect x="7.6647%" y="453" width="0.0442%" height="15" fill="rgb(235,93,37)" fg:x="12302" fg:w="71"/><text x="7.6947%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (37 samples, 0.02%)</title><rect x="7.7089%" y="453" width="0.0231%" height="15" fill="rgb(213,116,39)" fg:x="12373" fg:w="37"/><text x="7.7389%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (159 samples, 0.10%)</title><rect x="7.7320%" y="453" width="0.0991%" height="15" fill="rgb(222,207,29)" fg:x="12410" fg:w="159"/><text x="7.7620%" y="463.50"></text></g><g><title>[qsvlite] (1,136 samples, 0.71%)</title><rect x="7.1308%" y="469" width="0.7078%" height="15" fill="rgb(206,96,30)" fg:x="11445" fg:w="1136"/><text x="7.1608%" y="479.50">[qsvlit..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (200 samples, 0.12%)</title><rect x="7.8591%" y="453" width="0.1246%" height="15" fill="rgb(218,138,4)" fg:x="12614" fg:w="200"/><text x="7.8891%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (989 samples, 0.62%)</title><rect x="7.9837%" y="453" width="0.6162%" height="15" fill="rgb(250,191,14)" fg:x="12814" fg:w="989"/><text x="8.0137%" y="463.50">&lt;alloc..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (36 samples, 0.02%)</title><rect x="8.5999%" y="453" width="0.0224%" height="15" fill="rgb(239,60,40)" fg:x="13803" fg:w="36"/><text x="8.6299%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::enum_::EnumValidator as jsonschema::validator::Validate&gt;::validate (69 samples, 0.04%)</title><rect x="8.6342%" y="453" width="0.0430%" height="15" fill="rgb(206,27,48)" fg:x="13858" fg:w="69"/><text x="8.6642%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::max_length::MaxLengthValidator as jsonschema::validator::Validate&gt;::validate (89 samples, 0.06%)</title><rect x="8.6772%" y="453" width="0.0555%" height="15" fill="rgb(225,35,8)" fg:x="13927" fg:w="89"/><text x="8.7072%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::min_length::MinLengthValidator as jsonschema::validator::Validate&gt;::validate (83 samples, 0.05%)</title><rect x="8.7451%" y="453" width="0.0517%" height="15" fill="rgb(250,213,24)" fg:x="14036" fg:w="83"/><text x="8.7751%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::type_::MultipleTypesValidator as jsonschema::validator::Validate&gt;::validate (51 samples, 0.03%)</title><rect x="8.8055%" y="453" width="0.0318%" height="15" fill="rgb(247,123,22)" fg:x="14133" fg:w="51"/><text x="8.8355%" y="463.50"></text></g><g><title>&lt;jsonschema::keywords::type_::StringTypeValidator as jsonschema::validator::Validate&gt;::validate (28 samples, 0.02%)</title><rect x="8.8373%" y="453" width="0.0174%" height="15" fill="rgb(231,138,38)" fg:x="14184" fg:w="28"/><text x="8.8673%" y="463.50"></text></g><g><title>&lt;jsonschema::paths::JSONPointer as core::clone::Clone&gt;::clone (278 samples, 0.17%)</title><rect x="8.8547%" y="453" width="0.1732%" height="15" fill="rgb(231,145,46)" fg:x="14212" fg:w="278"/><text x="8.8847%" y="463.50"></text></g><g><title>&lt;jsonschema::paths::JSONPointer as core::fmt::Display&gt;::fmt (137 samples, 0.09%)</title><rect x="9.0279%" y="453" width="0.0854%" height="15" fill="rgb(251,118,11)" fg:x="14490" fg:w="137"/><text x="9.0579%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (28 samples, 0.02%)</title><rect x="9.1133%" y="245" width="0.0174%" height="15" fill="rgb(217,147,25)" fg:x="14627" fg:w="28"/><text x="9.1433%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.02%)</title><rect x="9.1133%" y="229" width="0.0174%" height="15" fill="rgb(247,81,37)" fg:x="14627" fg:w="28"/><text x="9.1433%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (28 samples, 0.02%)</title><rect x="9.1133%" y="213" width="0.0174%" height="15" fill="rgb(209,12,38)" fg:x="14627" fg:w="28"/><text x="9.1433%" y="223.50"></text></g><g><title>_mi_heap_realloc_zero (28 samples, 0.02%)</title><rect x="9.1133%" y="197" width="0.0174%" height="15" fill="rgb(227,1,9)" fg:x="14627" fg:w="28"/><text x="9.1433%" y="207.50"></text></g><g><title>_mi_malloc_generic (28 samples, 0.02%)</title><rect x="9.1133%" y="181" width="0.0174%" height="15" fill="rgb(248,47,43)" fg:x="14627" fg:w="28"/><text x="9.1433%" y="191.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (32 samples, 0.02%)</title><rect x="9.1133%" y="277" width="0.0199%" height="15" fill="rgb(221,10,30)" fg:x="14627" fg:w="32"/><text x="9.1433%" y="287.50"></text></g><g><title>&lt;jsonschema::paths::JSONPointer as core::fmt::Display&gt;::fmt (32 samples, 0.02%)</title><rect x="9.1133%" y="261" width="0.0199%" height="15" fill="rgb(210,229,1)" fg:x="14627" fg:w="32"/><text x="9.1433%" y="271.50"></text></g><g><title>__memset_avx2_unaligned_erms (39 samples, 0.02%)</title><rect x="9.6092%" y="245" width="0.0243%" height="15" fill="rgb(222,148,37)" fg:x="15423" fg:w="39"/><text x="9.6392%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,480 samples, 0.92%)</title><rect x="9.1133%" y="293" width="0.9221%" height="15" fill="rgb(234,67,33)" fg:x="14627" fg:w="1480"/><text x="9.1433%" y="303.50">core::iter:..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (1,448 samples, 0.90%)</title><rect x="9.1332%" y="277" width="0.9022%" height="15" fill="rgb(247,98,35)" fg:x="14659" fg:w="1448"/><text x="9.1632%" y="287.50">serde_json..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,442 samples, 0.90%)</title><rect x="9.1370%" y="261" width="0.8984%" height="15" fill="rgb(247,138,52)" fg:x="14665" fg:w="1442"/><text x="9.1670%" y="271.50">hashbrown:..</text></g><g><title>mi_malloc (642 samples, 0.40%)</title><rect x="9.6354%" y="245" width="0.4000%" height="15" fill="rgb(213,79,30)" fg:x="15465" fg:w="642"/><text x="9.6654%" y="255.50">mi_..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,123 samples, 0.70%)</title><rect x="10.4397%" y="245" width="0.6997%" height="15" fill="rgb(246,177,23)" fg:x="16756" fg:w="1123"/><text x="10.4697%" y="255.50">&lt;std::c..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1,749 samples, 1.09%)</title><rect x="10.0510%" y="261" width="1.0897%" height="15" fill="rgb(230,62,27)" fg:x="16132" fg:w="1749"/><text x="10.0810%" y="271.50">indexmap::map..</text></g><g><title>&lt;jsonschema::keywords::properties::PropertiesValidator as jsonschema::validator::Validate&gt;::apply (1,995 samples, 1.24%)</title><rect x="10.0354%" y="277" width="1.2430%" height="15" fill="rgb(216,154,8)" fg:x="16107" fg:w="1995"/><text x="10.0654%" y="287.50">&lt;jsonschema::ke..</text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt; for serde_json::value::Value&gt;::from (221 samples, 0.14%)</title><rect x="11.1407%" y="261" width="0.1377%" height="15" fill="rgb(244,35,45)" fg:x="17881" fg:w="221"/><text x="11.1707%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (566 samples, 0.35%)</title><rect x="11.5749%" y="229" width="0.3526%" height="15" fill="rgb(251,115,12)" fg:x="18578" fg:w="566"/><text x="11.6049%" y="239.50">&lt;s..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (4,519 samples, 2.82%)</title><rect x="9.1133%" y="341" width="2.8155%" height="15" fill="rgb(240,54,50)" fg:x="14627" fg:w="4519"/><text x="9.1433%" y="351.50">rayon::iter::plumbing::bridge_produce..</text></g><g><title>rayon_core::join::join_context::{{closure}} (4,519 samples, 2.82%)</title><rect x="9.1133%" y="325" width="2.8155%" height="15" fill="rgb(233,84,52)" fg:x="14627" fg:w="4519"/><text x="9.1433%" y="335.50">rayon_core::join::join_context::{{clo..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (4,519 samples, 2.82%)</title><rect x="9.1133%" y="309" width="2.8155%" height="15" fill="rgb(207,117,47)" fg:x="14627" fg:w="4519"/><text x="9.1433%" y="319.50">rayon::iter::plumbing::bridge_produce..</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (3,039 samples, 1.89%)</title><rect x="10.0354%" y="293" width="1.8934%" height="15" fill="rgb(249,43,39)" fg:x="16107" fg:w="3039"/><text x="10.0654%" y="303.50">jsonschema::schema_node:..</text></g><g><title>jsonschema::validator::Validate::apply (1,044 samples, 0.65%)</title><rect x="11.2784%" y="277" width="0.6505%" height="15" fill="rgb(209,38,44)" fg:x="18102" fg:w="1044"/><text x="11.3084%" y="287.50">jsonsch..</text></g><g><title>&lt;jsonschema::keywords::required::RequiredValidator as jsonschema::validator::Validate&gt;::validate (1,044 samples, 0.65%)</title><rect x="11.2784%" y="261" width="0.6505%" height="15" fill="rgb(236,212,23)" fg:x="18102" fg:w="1044"/><text x="11.3084%" y="271.50">&lt;jsonsc..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1,044 samples, 0.65%)</title><rect x="11.2784%" y="245" width="0.6505%" height="15" fill="rgb(242,79,21)" fg:x="18102" fg:w="1044"/><text x="11.3084%" y="255.50">indexma..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (4,520 samples, 2.82%)</title><rect x="9.1133%" y="373" width="2.8162%" height="15" fill="rgb(211,96,35)" fg:x="14627" fg:w="4520"/><text x="9.1433%" y="383.50">rayon::iter::plumbing::bridge_produce..</text></g><g><title>rayon_core::join::join_context::{{closure}} (4,520 samples, 2.82%)</title><rect x="9.1133%" y="357" width="2.8162%" height="15" fill="rgb(253,215,40)" fg:x="14627" fg:w="4520"/><text x="9.1433%" y="367.50">rayon_core::join::join_context::{{clo..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (4,521 samples, 2.82%)</title><rect x="9.1133%" y="405" width="2.8168%" height="15" fill="rgb(211,81,21)" fg:x="14627" fg:w="4521"/><text x="9.1433%" y="415.50">rayon::iter::plumbing::bridge_produce..</text></g><g><title>rayon_core::join::join_context::{{closure}} (4,521 samples, 2.82%)</title><rect x="9.1133%" y="389" width="2.8168%" height="15" fill="rgb(208,190,38)" fg:x="14627" fg:w="4521"/><text x="9.1433%" y="399.50">rayon_core::join::join_context::{{clo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="11.9681%" y="229" width="0.0162%" height="15" fill="rgb(235,213,38)" fg:x="19209" fg:w="26"/><text x="11.9981%" y="239.50"></text></g><g><title>mi_free (17 samples, 0.01%)</title><rect x="11.9737%" y="213" width="0.0106%" height="15" fill="rgb(237,122,38)" fg:x="19218" fg:w="17"/><text x="12.0037%" y="223.50"></text></g><g><title>core::str::converts::from_utf8 (51 samples, 0.03%)</title><rect x="11.9843%" y="229" width="0.0318%" height="15" fill="rgb(244,218,35)" fg:x="19235" fg:w="51"/><text x="12.0143%" y="239.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (4,696 samples, 2.93%)</title><rect x="9.1133%" y="437" width="2.9258%" height="15" fill="rgb(240,68,47)" fg:x="14627" fg:w="4696"/><text x="9.1433%" y="447.50">rayon::iter::plumbing::bridge_producer_..</text></g><g><title>rayon_core::join::join_context::{{closure}} (4,696 samples, 2.93%)</title><rect x="9.1133%" y="421" width="2.9258%" height="15" fill="rgb(210,16,53)" fg:x="14627" fg:w="4696"/><text x="9.1433%" y="431.50">rayon_core::join::join_context::{{closu..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (175 samples, 0.11%)</title><rect x="11.9301%" y="405" width="0.1090%" height="15" fill="rgb(235,124,12)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="415.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (175 samples, 0.11%)</title><rect x="11.9301%" y="389" width="0.1090%" height="15" fill="rgb(224,169,11)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (175 samples, 0.11%)</title><rect x="11.9301%" y="373" width="0.1090%" height="15" fill="rgb(250,166,2)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="383.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (175 samples, 0.11%)</title><rect x="11.9301%" y="357" width="0.1090%" height="15" fill="rgb(242,216,29)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (175 samples, 0.11%)</title><rect x="11.9301%" y="341" width="0.1090%" height="15" fill="rgb(230,116,27)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="351.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (175 samples, 0.11%)</title><rect x="11.9301%" y="325" width="0.1090%" height="15" fill="rgb(228,99,48)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (175 samples, 0.11%)</title><rect x="11.9301%" y="309" width="0.1090%" height="15" fill="rgb(253,11,6)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="319.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (175 samples, 0.11%)</title><rect x="11.9301%" y="293" width="0.1090%" height="15" fill="rgb(247,143,39)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (175 samples, 0.11%)</title><rect x="11.9301%" y="277" width="0.1090%" height="15" fill="rgb(236,97,10)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="287.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (175 samples, 0.11%)</title><rect x="11.9301%" y="261" width="0.1090%" height="15" fill="rgb(233,208,19)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (175 samples, 0.11%)</title><rect x="11.9301%" y="245" width="0.1090%" height="15" fill="rgb(216,164,2)" fg:x="19148" fg:w="175"/><text x="11.9601%" y="255.50"></text></g><g><title>mi_malloc (35 samples, 0.02%)</title><rect x="12.0173%" y="229" width="0.0218%" height="15" fill="rgb(220,129,5)" fg:x="19288" fg:w="35"/><text x="12.0473%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.01%)</title><rect x="12.6385%" y="261" width="0.0137%" height="15" fill="rgb(242,17,10)" fg:x="20285" fg:w="22"/><text x="12.6685%" y="271.50"></text></g><g><title>mi_malloc (222 samples, 0.14%)</title><rect x="12.6528%" y="261" width="0.1383%" height="15" fill="rgb(242,107,0)" fg:x="20308" fg:w="222"/><text x="12.6828%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (27 samples, 0.02%)</title><rect x="12.9120%" y="245" width="0.0168%" height="15" fill="rgb(251,28,31)" fg:x="20724" fg:w="27"/><text x="12.9420%" y="255.50"></text></g><g><title>mi_malloc (232 samples, 0.14%)</title><rect x="12.9294%" y="245" width="0.1445%" height="15" fill="rgb(233,223,10)" fg:x="20752" fg:w="232"/><text x="12.9594%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,659 samples, 1.03%)</title><rect x="12.0410%" y="277" width="1.0336%" height="15" fill="rgb(215,21,27)" fg:x="19326" fg:w="1659"/><text x="12.0710%" y="287.50">core::iter::..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (455 samples, 0.28%)</title><rect x="12.7911%" y="261" width="0.2835%" height="15" fill="rgb(232,23,21)" fg:x="20530" fg:w="455"/><text x="12.8211%" y="271.50">se..</text></g><g><title>core::str::&lt;impl str&gt;::parse (21 samples, 0.01%)</title><rect x="13.0746%" y="277" width="0.0131%" height="15" fill="rgb(244,5,23)" fg:x="20985" fg:w="21"/><text x="13.1046%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (21 samples, 0.01%)</title><rect x="13.0746%" y="261" width="0.0131%" height="15" fill="rgb(226,81,46)" fg:x="20985" fg:w="21"/><text x="13.1046%" y="271.50"></text></g><g><title>_mi_malloc_generic (19 samples, 0.01%)</title><rect x="13.1269%" y="261" width="0.0118%" height="15" fill="rgb(247,70,30)" fg:x="21069" fg:w="19"/><text x="13.1569%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.02%)</title><rect x="13.1431%" y="261" width="0.0156%" height="15" fill="rgb(212,68,19)" fg:x="21095" fg:w="25"/><text x="13.1731%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.01%)</title><rect x="13.1475%" y="245" width="0.0112%" height="15" fill="rgb(240,187,13)" fg:x="21102" fg:w="18"/><text x="13.1775%" y="255.50"></text></g><g><title>mi_malloc (18 samples, 0.01%)</title><rect x="13.1475%" y="229" width="0.0112%" height="15" fill="rgb(223,113,26)" fg:x="21102" fg:w="18"/><text x="13.1775%" y="239.50"></text></g><g><title>jsonschema::validator::Validate::apply (17 samples, 0.01%)</title><rect x="13.1674%" y="261" width="0.0106%" height="15" fill="rgb(206,192,2)" fg:x="21134" fg:w="17"/><text x="13.1974%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,850 samples, 1.15%)</title><rect x="12.0391%" y="421" width="1.1526%" height="15" fill="rgb(241,108,4)" fg:x="19323" fg:w="1850"/><text x="12.0691%" y="431.50">rayon::iter::p..</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,850 samples, 1.15%)</title><rect x="12.0391%" y="405" width="1.1526%" height="15" fill="rgb(247,173,49)" fg:x="19323" fg:w="1850"/><text x="12.0691%" y="415.50">rayon_core::jo..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,850 samples, 1.15%)</title><rect x="12.0391%" y="389" width="1.1526%" height="15" fill="rgb(224,114,35)" fg:x="19323" fg:w="1850"/><text x="12.0691%" y="399.50">rayon::iter::p..</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,850 samples, 1.15%)</title><rect x="12.0391%" y="373" width="1.1526%" height="15" fill="rgb(245,159,27)" fg:x="19323" fg:w="1850"/><text x="12.0691%" y="383.50">rayon_core::jo..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,850 samples, 1.15%)</title><rect x="12.0391%" y="357" width="1.1526%" height="15" fill="rgb(245,172,44)" fg:x="19323" fg:w="1850"/><text x="12.0691%" y="367.50">rayon::iter::p..</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,850 samples, 1.15%)</title><rect x="12.0391%" y="341" width="1.1526%" height="15" fill="rgb(236,23,11)" fg:x="19323" fg:w="1850"/><text x="12.0691%" y="351.50">rayon_core::jo..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,850 samples, 1.15%)</title><rect x="12.0391%" y="325" width="1.1526%" height="15" fill="rgb(205,117,38)" fg:x="19323" fg:w="1850"/><text x="12.0691%" y="335.50">rayon::iter::p..</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,850 samples, 1.15%)</title><rect x="12.0391%" y="309" width="1.1526%" height="15" fill="rgb(237,72,25)" fg:x="19323" fg:w="1850"/><text x="12.0691%" y="319.50">rayon_core::jo..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,850 samples, 1.15%)</title><rect x="12.0391%" y="293" width="1.1526%" height="15" fill="rgb(244,70,9)" fg:x="19323" fg:w="1850"/><text x="12.0691%" y="303.50">rayon::iter::p..</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (167 samples, 0.10%)</title><rect x="13.0877%" y="277" width="0.1040%" height="15" fill="rgb(217,125,39)" fg:x="21006" fg:w="167"/><text x="13.1177%" y="287.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (6,547 samples, 4.08%)</title><rect x="9.1133%" y="453" width="4.0791%" height="15" fill="rgb(235,36,10)" fg:x="14627" fg:w="6547"/><text x="9.1433%" y="463.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::J..</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,851 samples, 1.15%)</title><rect x="12.0391%" y="437" width="1.1533%" height="15" fill="rgb(251,123,47)" fg:x="19323" fg:w="1851"/><text x="12.0691%" y="447.50">rayon_core::jo..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (171 samples, 0.11%)</title><rect x="13.1924%" y="453" width="0.1065%" height="15" fill="rgb(221,13,13)" fg:x="21174" fg:w="171"/><text x="13.2224%" y="463.50"></text></g><g><title>__memcmp_avx2_movbe (37 samples, 0.02%)</title><rect x="13.3101%" y="453" width="0.0231%" height="15" fill="rgb(238,131,9)" fg:x="21363" fg:w="37"/><text x="13.3401%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (95 samples, 0.06%)</title><rect x="13.3332%" y="453" width="0.0592%" height="15" fill="rgb(211,50,8)" fg:x="21400" fg:w="95"/><text x="13.3632%" y="463.50"></text></g><g><title>_mi_heap_realloc_zero (198 samples, 0.12%)</title><rect x="13.4011%" y="453" width="0.1234%" height="15" fill="rgb(245,182,24)" fg:x="21509" fg:w="198"/><text x="13.4311%" y="463.50"></text></g><g><title>_mi_malloc_generic (111 samples, 0.07%)</title><rect x="13.5244%" y="453" width="0.0692%" height="15" fill="rgb(242,14,37)" fg:x="21707" fg:w="111"/><text x="13.5544%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (82 samples, 0.05%)</title><rect x="13.6023%" y="453" width="0.0511%" height="15" fill="rgb(246,228,12)" fg:x="21832" fg:w="82"/><text x="13.6323%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (395 samples, 0.25%)</title><rect x="13.6534%" y="453" width="0.2461%" height="15" fill="rgb(213,55,15)" fg:x="21914" fg:w="395"/><text x="13.6834%" y="463.50">a..</text></g><g><title>bytecount::num_chars (20 samples, 0.01%)</title><rect x="13.8995%" y="453" width="0.0125%" height="15" fill="rgb(209,9,3)" fg:x="22309" fg:w="20"/><text x="13.9295%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (287 samples, 0.18%)</title><rect x="13.9132%" y="453" width="0.1788%" height="15" fill="rgb(230,59,30)" fg:x="22331" fg:w="287"/><text x="13.9432%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (92 samples, 0.06%)</title><rect x="14.0920%" y="453" width="0.0573%" height="15" fill="rgb(209,121,21)" fg:x="22618" fg:w="92"/><text x="14.1220%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (20 samples, 0.01%)</title><rect x="14.1587%" y="245" width="0.0125%" height="15" fill="rgb(220,109,13)" fg:x="22725" fg:w="20"/><text x="14.1887%" y="255.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 0.01%)</title><rect x="14.1587%" y="229" width="0.0125%" height="15" fill="rgb(232,18,1)" fg:x="22725" fg:w="20"/><text x="14.1887%" y="239.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 0.01%)</title><rect x="14.1587%" y="213" width="0.0125%" height="15" fill="rgb(215,41,42)" fg:x="22725" fg:w="20"/><text x="14.1887%" y="223.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 0.01%)</title><rect x="14.1587%" y="197" width="0.0125%" height="15" fill="rgb(224,123,36)" fg:x="22725" fg:w="20"/><text x="14.1887%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (20 samples, 0.01%)</title><rect x="14.1587%" y="181" width="0.0125%" height="15" fill="rgb(240,125,3)" fg:x="22725" fg:w="20"/><text x="14.1887%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (836 samples, 0.52%)</title><rect x="15.4964%" y="229" width="0.5209%" height="15" fill="rgb(205,98,50)" fg:x="24872" fg:w="836"/><text x="15.5264%" y="239.50">&lt;std:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,990 samples, 1.86%)</title><rect x="14.1581%" y="357" width="1.8629%" height="15" fill="rgb(205,185,37)" fg:x="22724" fg:w="2990"/><text x="14.1881%" y="367.50">rayon::iter::plumbing::b..</text></g><g><title>rayon_core::join::join_context::{{closure}} (2,990 samples, 1.86%)</title><rect x="14.1581%" y="341" width="1.8629%" height="15" fill="rgb(238,207,15)" fg:x="22724" fg:w="2990"/><text x="14.1881%" y="351.50">rayon_core::join::join_c..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,990 samples, 1.86%)</title><rect x="14.1581%" y="325" width="1.8629%" height="15" fill="rgb(213,199,42)" fg:x="22724" fg:w="2990"/><text x="14.1881%" y="335.50">rayon::iter::plumbing::b..</text></g><g><title>rayon_core::join::join_context::{{closure}} (2,990 samples, 1.86%)</title><rect x="14.1581%" y="309" width="1.8629%" height="15" fill="rgb(235,201,11)" fg:x="22724" fg:w="2990"/><text x="14.1881%" y="319.50">rayon_core::join::join_c..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,990 samples, 1.86%)</title><rect x="14.1581%" y="293" width="1.8629%" height="15" fill="rgb(207,46,11)" fg:x="22724" fg:w="2990"/><text x="14.1881%" y="303.50">rayon::iter::plumbing::b..</text></g><g><title>rayon_core::join::join_context::{{closure}} (2,989 samples, 1.86%)</title><rect x="14.1587%" y="277" width="1.8623%" height="15" fill="rgb(241,35,35)" fg:x="22725" fg:w="2989"/><text x="14.1887%" y="287.50">rayon_core::join::join_c..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,989 samples, 1.86%)</title><rect x="14.1587%" y="261" width="1.8623%" height="15" fill="rgb(243,32,47)" fg:x="22725" fg:w="2989"/><text x="14.1887%" y="271.50">rayon::iter::plumbing::b..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (2,969 samples, 1.85%)</title><rect x="14.1712%" y="245" width="1.8498%" height="15" fill="rgb(247,202,23)" fg:x="22745" fg:w="2969"/><text x="14.2012%" y="255.50">serde_json::map::Map&lt;all..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (2,991 samples, 1.86%)</title><rect x="14.1581%" y="453" width="1.8635%" height="15" fill="rgb(219,102,11)" fg:x="22724" fg:w="2991"/><text x="14.1881%" y="463.50">core::ops::function::FnO..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,991 samples, 1.86%)</title><rect x="14.1581%" y="437" width="1.8635%" height="15" fill="rgb(243,110,44)" fg:x="22724" fg:w="2991"/><text x="14.1881%" y="447.50">std::sys_common::backtra..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (2,991 samples, 1.86%)</title><rect x="14.1581%" y="421" width="1.8635%" height="15" fill="rgb(222,74,54)" fg:x="22724" fg:w="2991"/><text x="14.1881%" y="431.50">rayon_core::registry::Wo..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (2,991 samples, 1.86%)</title><rect x="14.1581%" y="405" width="1.8635%" height="15" fill="rgb(216,99,12)" fg:x="22724" fg:w="2991"/><text x="14.1881%" y="415.50">&lt;rayon_core::job::StackJ..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,991 samples, 1.86%)</title><rect x="14.1581%" y="389" width="1.8635%" height="15" fill="rgb(226,22,26)" fg:x="22724" fg:w="2991"/><text x="14.1881%" y="399.50">rayon::iter::plumbing::b..</text></g><g><title>rayon_core::join::join_context::{{closure}} (2,991 samples, 1.86%)</title><rect x="14.1581%" y="373" width="1.8635%" height="15" fill="rgb(217,163,10)" fg:x="22724" fg:w="2991"/><text x="14.1881%" y="383.50">rayon_core::join::join_c..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;mio::event::event::Event as core::fmt::Debug&gt;::fmt::EventDetails&gt; (39 samples, 0.02%)</title><rect x="16.0216%" y="453" width="0.0243%" height="15" fill="rgb(213,25,53)" fg:x="25715" fg:w="39"/><text x="16.0516%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::Annotations&gt;&gt;&gt; (456 samples, 0.28%)</title><rect x="16.0459%" y="453" width="0.2841%" height="15" fill="rgb(252,105,26)" fg:x="25754" fg:w="456"/><text x="16.0759%" y="463.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::ErrorDescription&gt;&gt;&gt; (29 samples, 0.02%)</title><rect x="16.3300%" y="453" width="0.0181%" height="15" fill="rgb(220,39,43)" fg:x="26210" fg:w="29"/><text x="16.3600%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (42 samples, 0.03%)</title><rect x="16.3481%" y="453" width="0.0262%" height="15" fill="rgb(229,68,48)" fg:x="26239" fg:w="42"/><text x="16.3781%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (221 samples, 0.14%)</title><rect x="16.3830%" y="453" width="0.1377%" height="15" fill="rgb(252,8,32)" fg:x="26295" fg:w="221"/><text x="16.4130%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (47 samples, 0.03%)</title><rect x="16.5275%" y="453" width="0.0293%" height="15" fill="rgb(223,20,43)" fg:x="26527" fg:w="47"/><text x="16.5575%" y="463.50"></text></g><g><title>core::str::converts::from_utf8 (41 samples, 0.03%)</title><rect x="16.5568%" y="453" width="0.0255%" height="15" fill="rgb(229,81,49)" fg:x="26574" fg:w="41"/><text x="16.5868%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (89 samples, 0.06%)</title><rect x="16.5992%" y="453" width="0.0555%" height="15" fill="rgb(236,28,36)" fg:x="26642" fg:w="89"/><text x="16.6292%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (210 samples, 0.13%)</title><rect x="16.6546%" y="453" width="0.1308%" height="15" fill="rgb(249,185,26)" fg:x="26731" fg:w="210"/><text x="16.6846%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (185 samples, 0.12%)</title><rect x="16.7855%" y="453" width="0.1153%" height="15" fill="rgb(249,174,33)" fg:x="26941" fg:w="185"/><text x="16.8155%" y="463.50"></text></g><g><title>jsonschema::keywords::helpers::equal (545 samples, 0.34%)</title><rect x="16.9007%" y="453" width="0.3396%" height="15" fill="rgb(233,201,37)" fg:x="27126" fg:w="545"/><text x="16.9307%" y="463.50">js..</text></g><g><title>jsonschema::paths::InstancePath::to_vec (120 samples, 0.07%)</title><rect x="17.2403%" y="453" width="0.0748%" height="15" fill="rgb(221,78,26)" fg:x="27671" fg:w="120"/><text x="17.2703%" y="463.50"></text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (46 samples, 0.03%)</title><rect x="17.3150%" y="453" width="0.0287%" height="15" fill="rgb(250,127,30)" fg:x="27791" fg:w="46"/><text x="17.3450%" y="463.50"></text></g><g><title>jsonschema::validator::Validate::apply (1,615 samples, 1.01%)</title><rect x="17.3437%" y="453" width="1.0062%" height="15" fill="rgb(230,49,44)" fg:x="27837" fg:w="1615"/><text x="17.3737%" y="463.50">jsonschema::..</text></g><g><title>mi_free (38 samples, 0.02%)</title><rect x="18.3499%" y="453" width="0.0237%" height="15" fill="rgb(229,67,23)" fg:x="29452" fg:w="38"/><text x="18.3799%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (27 samples, 0.02%)</title><rect x="18.4016%" y="405" width="0.0168%" height="15" fill="rgb(249,83,47)" fg:x="29535" fg:w="27"/><text x="18.4316%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 0.01%)</title><rect x="18.4060%" y="389" width="0.0125%" height="15" fill="rgb(215,43,3)" fg:x="29542" fg:w="20"/><text x="18.4360%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (83 samples, 0.05%)</title><rect x="18.4266%" y="389" width="0.0517%" height="15" fill="rgb(238,154,13)" fg:x="29575" fg:w="83"/><text x="18.4566%" y="399.50"></text></g><g><title>mi_page_free_list_extend.isra.0 (21 samples, 0.01%)</title><rect x="18.5044%" y="357" width="0.0131%" height="15" fill="rgb(219,56,2)" fg:x="29700" fg:w="21"/><text x="18.5344%" y="367.50"></text></g><g><title>_mi_malloc_generic (73 samples, 0.05%)</title><rect x="18.4783%" y="389" width="0.0455%" height="15" fill="rgb(233,0,4)" fg:x="29658" fg:w="73"/><text x="18.5083%" y="399.50"></text></g><g><title>mi_page_queue_find_free_ex (44 samples, 0.03%)</title><rect x="18.4963%" y="373" width="0.0274%" height="15" fill="rgb(235,30,7)" fg:x="29687" fg:w="44"/><text x="18.5263%" y="383.50"></text></g><g><title>&lt;csv::byte_record::ByteRecord as core::clone::Clone&gt;::clone (190 samples, 0.12%)</title><rect x="18.4185%" y="405" width="0.1184%" height="15" fill="rgb(250,79,13)" fg:x="29562" fg:w="190"/><text x="18.4485%" y="415.50"></text></g><g><title>mi_malloc (21 samples, 0.01%)</title><rect x="18.5238%" y="389" width="0.0131%" height="15" fill="rgb(211,146,34)" fg:x="29731" fg:w="21"/><text x="18.5538%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::writer::Writer&lt;alloc::boxed::Box&lt;dyn std::io::Write&gt;&gt;&gt; (151 samples, 0.09%)</title><rect x="18.5462%" y="405" width="0.0941%" height="15" fill="rgb(228,22,38)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="415.50"></text></g><g><title>__close (151 samples, 0.09%)</title><rect x="18.5462%" y="389" width="0.0941%" height="15" fill="rgb(235,168,5)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="399.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="373" width="0.0941%" height="15" fill="rgb(221,155,16)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="383.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="357" width="0.0941%" height="15" fill="rgb(215,215,53)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="367.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="341" width="0.0941%" height="15" fill="rgb(223,4,10)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="351.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="325" width="0.0941%" height="15" fill="rgb(234,103,6)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="335.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="309" width="0.0941%" height="15" fill="rgb(227,97,0)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="319.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="293" width="0.0941%" height="15" fill="rgb(234,150,53)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="303.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="277" width="0.0941%" height="15" fill="rgb(228,201,54)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="287.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="261" width="0.0941%" height="15" fill="rgb(222,22,37)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="271.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="245" width="0.0941%" height="15" fill="rgb(237,53,32)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="255.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="229" width="0.0941%" height="15" fill="rgb(233,25,53)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="239.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="213" width="0.0941%" height="15" fill="rgb(210,40,34)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="223.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="197" width="0.0941%" height="15" fill="rgb(241,220,44)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="207.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="181" width="0.0941%" height="15" fill="rgb(235,28,35)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="191.50"></text></g><g><title>[unknown] (151 samples, 0.09%)</title><rect x="18.5462%" y="165" width="0.0941%" height="15" fill="rgb(210,56,17)" fg:x="29767" fg:w="151"/><text x="18.5762%" y="175.50"></text></g><g><title>[unknown] (135 samples, 0.08%)</title><rect x="18.5562%" y="149" width="0.0841%" height="15" fill="rgb(224,130,29)" fg:x="29783" fg:w="135"/><text x="18.5862%" y="159.50"></text></g><g><title>[unknown] (121 samples, 0.08%)</title><rect x="18.5649%" y="133" width="0.0754%" height="15" fill="rgb(235,212,8)" fg:x="29797" fg:w="121"/><text x="18.5949%" y="143.50"></text></g><g><title>[unknown] (82 samples, 0.05%)</title><rect x="18.5892%" y="117" width="0.0511%" height="15" fill="rgb(223,33,50)" fg:x="29836" fg:w="82"/><text x="18.6192%" y="127.50"></text></g><g><title>[unknown] (55 samples, 0.03%)</title><rect x="18.6060%" y="101" width="0.0343%" height="15" fill="rgb(219,149,13)" fg:x="29863" fg:w="55"/><text x="18.6360%" y="111.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="18.6241%" y="85" width="0.0162%" height="15" fill="rgb(250,156,29)" fg:x="29892" fg:w="26"/><text x="18.6541%" y="95.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="18.6297%" y="69" width="0.0106%" height="15" fill="rgb(216,193,19)" fg:x="29901" fg:w="17"/><text x="18.6597%" y="79.50"></text></g><g><title>[unknown] (201 samples, 0.13%)</title><rect x="18.6833%" y="357" width="0.1252%" height="15" fill="rgb(216,135,14)" fg:x="29987" fg:w="201"/><text x="18.7133%" y="367.50"></text></g><g><title>[unknown] (185 samples, 0.12%)</title><rect x="18.6932%" y="341" width="0.1153%" height="15" fill="rgb(241,47,5)" fg:x="30003" fg:w="185"/><text x="18.7232%" y="351.50"></text></g><g><title>[unknown] (184 samples, 0.11%)</title><rect x="18.6938%" y="325" width="0.1146%" height="15" fill="rgb(233,42,35)" fg:x="30004" fg:w="184"/><text x="18.7238%" y="335.50"></text></g><g><title>[unknown] (161 samples, 0.10%)</title><rect x="18.7082%" y="309" width="0.1003%" height="15" fill="rgb(231,13,6)" fg:x="30027" fg:w="161"/><text x="18.7382%" y="319.50"></text></g><g><title>[unknown] (158 samples, 0.10%)</title><rect x="18.7100%" y="293" width="0.0984%" height="15" fill="rgb(207,181,40)" fg:x="30030" fg:w="158"/><text x="18.7400%" y="303.50"></text></g><g><title>[unknown] (152 samples, 0.09%)</title><rect x="18.7138%" y="277" width="0.0947%" height="15" fill="rgb(254,173,49)" fg:x="30036" fg:w="152"/><text x="18.7438%" y="287.50"></text></g><g><title>[unknown] (150 samples, 0.09%)</title><rect x="18.7150%" y="261" width="0.0935%" height="15" fill="rgb(221,1,38)" fg:x="30038" fg:w="150"/><text x="18.7450%" y="271.50"></text></g><g><title>[unknown] (144 samples, 0.09%)</title><rect x="18.7188%" y="245" width="0.0897%" height="15" fill="rgb(206,124,46)" fg:x="30044" fg:w="144"/><text x="18.7488%" y="255.50"></text></g><g><title>[unknown] (143 samples, 0.09%)</title><rect x="18.7194%" y="229" width="0.0891%" height="15" fill="rgb(249,21,11)" fg:x="30045" fg:w="143"/><text x="18.7494%" y="239.50"></text></g><g><title>[unknown] (138 samples, 0.09%)</title><rect x="18.7225%" y="213" width="0.0860%" height="15" fill="rgb(222,201,40)" fg:x="30050" fg:w="138"/><text x="18.7525%" y="223.50"></text></g><g><title>[unknown] (130 samples, 0.08%)</title><rect x="18.7275%" y="197" width="0.0810%" height="15" fill="rgb(235,61,29)" fg:x="30058" fg:w="130"/><text x="18.7575%" y="207.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (203 samples, 0.13%)</title><rect x="18.6826%" y="389" width="0.1265%" height="15" fill="rgb(219,207,3)" fg:x="29986" fg:w="203"/><text x="18.7126%" y="399.50"></text></g><g><title>__libc_read (203 samples, 0.13%)</title><rect x="18.6826%" y="373" width="0.1265%" height="15" fill="rgb(222,56,46)" fg:x="29986" fg:w="203"/><text x="18.7126%" y="383.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (2,254 samples, 1.40%)</title><rect x="18.6440%" y="405" width="1.4043%" height="15" fill="rgb(239,76,54)" fg:x="29924" fg:w="2254"/><text x="18.6740%" y="415.50">csv::reader::Read..</text></g><g><title>csv_core::reader::Reader::read_record (1,988 samples, 1.24%)</title><rect x="18.8097%" y="389" width="1.2386%" height="15" fill="rgb(231,124,27)" fg:x="30190" fg:w="1988"/><text x="18.8397%" y="399.50">csv_core::reade..</text></g><g><title>__memmove_avx_unaligned_erms (88 samples, 0.05%)</title><rect x="20.4733%" y="389" width="0.0548%" height="15" fill="rgb(249,195,6)" fg:x="32860" fg:w="88"/><text x="20.5033%" y="399.50"></text></g><g><title>csv::writer::Writer&lt;W&gt;::write_byte_record (792 samples, 0.49%)</title><rect x="20.0483%" y="405" width="0.4935%" height="15" fill="rgb(237,174,47)" fg:x="32178" fg:w="792"/><text x="20.0783%" y="415.50">csv:..</text></g><g><title>csv_core::writer::quote (22 samples, 0.01%)</title><rect x="20.5281%" y="389" width="0.0137%" height="15" fill="rgb(206,201,31)" fg:x="32948" fg:w="22"/><text x="20.5581%" y="399.50"></text></g><g><title>csv_core::writer::Writer::field (22 samples, 0.01%)</title><rect x="20.5493%" y="389" width="0.0137%" height="15" fill="rgb(231,57,52)" fg:x="32982" fg:w="22"/><text x="20.5793%" y="399.50"></text></g><g><title>csv::writer::Writer&lt;W&gt;::write_record (392 samples, 0.24%)</title><rect x="20.5418%" y="405" width="0.2442%" height="15" fill="rgb(248,177,22)" fg:x="32970" fg:w="392"/><text x="20.5718%" y="415.50">c..</text></g><g><title>std::io::Write::write_all (358 samples, 0.22%)</title><rect x="20.5630%" y="389" width="0.2231%" height="15" fill="rgb(215,211,37)" fg:x="33004" fg:w="358"/><text x="20.5930%" y="399.50">s..</text></g><g><title>__libc_write (358 samples, 0.22%)</title><rect x="20.5630%" y="373" width="0.2231%" height="15" fill="rgb(241,128,51)" fg:x="33004" fg:w="358"/><text x="20.5930%" y="383.50">_..</text></g><g><title>[unknown] (357 samples, 0.22%)</title><rect x="20.5636%" y="357" width="0.2224%" height="15" fill="rgb(227,165,31)" fg:x="33005" fg:w="357"/><text x="20.5936%" y="367.50">[..</text></g><g><title>[unknown] (355 samples, 0.22%)</title><rect x="20.5649%" y="341" width="0.2212%" height="15" fill="rgb(228,167,24)" fg:x="33007" fg:w="355"/><text x="20.5949%" y="351.50">[..</text></g><g><title>[unknown] (355 samples, 0.22%)</title><rect x="20.5649%" y="325" width="0.2212%" height="15" fill="rgb(228,143,12)" fg:x="33007" fg:w="355"/><text x="20.5949%" y="335.50">[..</text></g><g><title>[unknown] (353 samples, 0.22%)</title><rect x="20.5661%" y="309" width="0.2199%" height="15" fill="rgb(249,149,8)" fg:x="33009" fg:w="353"/><text x="20.5961%" y="319.50">[..</text></g><g><title>[unknown] (353 samples, 0.22%)</title><rect x="20.5661%" y="293" width="0.2199%" height="15" fill="rgb(243,35,44)" fg:x="33009" fg:w="353"/><text x="20.5961%" y="303.50">[..</text></g><g><title>[unknown] (353 samples, 0.22%)</title><rect x="20.5661%" y="277" width="0.2199%" height="15" fill="rgb(246,89,9)" fg:x="33009" fg:w="353"/><text x="20.5961%" y="287.50">[..</text></g><g><title>[unknown] (353 samples, 0.22%)</title><rect x="20.5661%" y="261" width="0.2199%" height="15" fill="rgb(233,213,13)" fg:x="33009" fg:w="353"/><text x="20.5961%" y="271.50">[..</text></g><g><title>[unknown] (349 samples, 0.22%)</title><rect x="20.5686%" y="245" width="0.2174%" height="15" fill="rgb(233,141,41)" fg:x="33013" fg:w="349"/><text x="20.5986%" y="255.50">[..</text></g><g><title>[unknown] (347 samples, 0.22%)</title><rect x="20.5698%" y="229" width="0.2162%" height="15" fill="rgb(239,167,4)" fg:x="33015" fg:w="347"/><text x="20.5998%" y="239.50">[..</text></g><g><title>[unknown] (342 samples, 0.21%)</title><rect x="20.5730%" y="213" width="0.2131%" height="15" fill="rgb(209,217,16)" fg:x="33020" fg:w="342"/><text x="20.6030%" y="223.50">[..</text></g><g><title>[unknown] (320 samples, 0.20%)</title><rect x="20.5867%" y="197" width="0.1994%" height="15" fill="rgb(219,88,35)" fg:x="33042" fg:w="320"/><text x="20.6167%" y="207.50"></text></g><g><title>[unknown] (291 samples, 0.18%)</title><rect x="20.6047%" y="181" width="0.1813%" height="15" fill="rgb(220,193,23)" fg:x="33071" fg:w="291"/><text x="20.6347%" y="191.50"></text></g><g><title>[unknown] (278 samples, 0.17%)</title><rect x="20.6128%" y="165" width="0.1732%" height="15" fill="rgb(230,90,52)" fg:x="33084" fg:w="278"/><text x="20.6428%" y="175.50"></text></g><g><title>[unknown] (249 samples, 0.16%)</title><rect x="20.6309%" y="149" width="0.1551%" height="15" fill="rgb(252,106,19)" fg:x="33113" fg:w="249"/><text x="20.6609%" y="159.50"></text></g><g><title>[unknown] (212 samples, 0.13%)</title><rect x="20.6539%" y="133" width="0.1321%" height="15" fill="rgb(206,74,20)" fg:x="33150" fg:w="212"/><text x="20.6839%" y="143.50"></text></g><g><title>[unknown] (174 samples, 0.11%)</title><rect x="20.6776%" y="117" width="0.1084%" height="15" fill="rgb(230,138,44)" fg:x="33188" fg:w="174"/><text x="20.7076%" y="127.50"></text></g><g><title>[unknown] (124 samples, 0.08%)</title><rect x="20.7088%" y="101" width="0.0773%" height="15" fill="rgb(235,182,43)" fg:x="33238" fg:w="124"/><text x="20.7388%" y="111.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="20.7455%" y="85" width="0.0405%" height="15" fill="rgb(242,16,51)" fg:x="33297" fg:w="65"/><text x="20.7755%" y="95.50"></text></g><g><title>[unknown] (44 samples, 0.03%)</title><rect x="20.7586%" y="69" width="0.0274%" height="15" fill="rgb(248,9,4)" fg:x="33318" fg:w="44"/><text x="20.7886%" y="79.50"></text></g><g><title>mi_free (27 samples, 0.02%)</title><rect x="20.7873%" y="405" width="0.0168%" height="15" fill="rgb(210,31,22)" fg:x="33364" fg:w="27"/><text x="20.8173%" y="415.50"></text></g><g><title>qsvlite::config::Config::writer (127 samples, 0.08%)</title><rect x="20.8060%" y="405" width="0.0791%" height="15" fill="rgb(239,54,39)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="415.50"></text></g><g><title>qsvlite::config::Config::io_writer (127 samples, 0.08%)</title><rect x="20.8060%" y="389" width="0.0791%" height="15" fill="rgb(230,99,41)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="399.50"></text></g><g><title>std::fs::OpenOptions::_open (127 samples, 0.08%)</title><rect x="20.8060%" y="373" width="0.0791%" height="15" fill="rgb(253,106,12)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="383.50"></text></g><g><title>__open64 (127 samples, 0.08%)</title><rect x="20.8060%" y="357" width="0.0791%" height="15" fill="rgb(213,46,41)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="367.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="341" width="0.0791%" height="15" fill="rgb(215,133,35)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="351.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="325" width="0.0791%" height="15" fill="rgb(213,28,5)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="335.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="309" width="0.0791%" height="15" fill="rgb(215,77,49)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="319.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="293" width="0.0791%" height="15" fill="rgb(248,100,22)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="303.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="277" width="0.0791%" height="15" fill="rgb(208,67,9)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="287.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="261" width="0.0791%" height="15" fill="rgb(219,133,21)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="271.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="245" width="0.0791%" height="15" fill="rgb(246,46,29)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="255.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="229" width="0.0791%" height="15" fill="rgb(246,185,52)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="239.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="213" width="0.0791%" height="15" fill="rgb(252,136,11)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="223.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="197" width="0.0791%" height="15" fill="rgb(219,138,53)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="207.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="181" width="0.0791%" height="15" fill="rgb(211,51,23)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="191.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="165" width="0.0791%" height="15" fill="rgb(247,221,28)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="175.50"></text></g><g><title>[unknown] (127 samples, 0.08%)</title><rect x="20.8060%" y="149" width="0.0791%" height="15" fill="rgb(251,222,45)" fg:x="33394" fg:w="127"/><text x="20.8360%" y="159.50"></text></g><g><title>[unknown] (124 samples, 0.08%)</title><rect x="20.8078%" y="133" width="0.0773%" height="15" fill="rgb(217,162,53)" fg:x="33397" fg:w="124"/><text x="20.8378%" y="143.50"></text></g><g><title>[unknown] (101 samples, 0.06%)</title><rect x="20.8222%" y="117" width="0.0629%" height="15" fill="rgb(229,93,14)" fg:x="33420" fg:w="101"/><text x="20.8522%" y="127.50"></text></g><g><title>[unknown] (74 samples, 0.05%)</title><rect x="20.8390%" y="101" width="0.0461%" height="15" fill="rgb(209,67,49)" fg:x="33447" fg:w="74"/><text x="20.8690%" y="111.50"></text></g><g><title>[unknown] (48 samples, 0.03%)</title><rect x="20.8552%" y="85" width="0.0299%" height="15" fill="rgb(213,87,29)" fg:x="33473" fg:w="48"/><text x="20.8852%" y="95.50"></text></g><g><title>[unknown] (40 samples, 0.02%)</title><rect x="20.8602%" y="69" width="0.0249%" height="15" fill="rgb(205,151,52)" fg:x="33481" fg:w="40"/><text x="20.8902%" y="79.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="20.8695%" y="53" width="0.0156%" height="15" fill="rgb(253,215,39)" fg:x="33496" fg:w="25"/><text x="20.8995%" y="63.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="20.8726%" y="37" width="0.0125%" height="15" fill="rgb(221,220,41)" fg:x="33501" fg:w="20"/><text x="20.9026%" y="47.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (78 samples, 0.05%)</title><rect x="20.8907%" y="373" width="0.0486%" height="15" fill="rgb(218,133,21)" fg:x="33530" fg:w="78"/><text x="20.9207%" y="383.50"></text></g><g><title>__libc_read (78 samples, 0.05%)</title><rect x="20.8907%" y="357" width="0.0486%" height="15" fill="rgb(221,193,43)" fg:x="33530" fg:w="78"/><text x="20.9207%" y="367.50"></text></g><g><title>[unknown] (77 samples, 0.05%)</title><rect x="20.8913%" y="341" width="0.0480%" height="15" fill="rgb(240,128,52)" fg:x="33531" fg:w="77"/><text x="20.9213%" y="351.50"></text></g><g><title>[unknown] (67 samples, 0.04%)</title><rect x="20.8976%" y="325" width="0.0417%" height="15" fill="rgb(253,114,12)" fg:x="33541" fg:w="67"/><text x="20.9276%" y="335.50"></text></g><g><title>[unknown] (67 samples, 0.04%)</title><rect x="20.8976%" y="309" width="0.0417%" height="15" fill="rgb(215,223,47)" fg:x="33541" fg:w="67"/><text x="20.9276%" y="319.50"></text></g><g><title>[unknown] (60 samples, 0.04%)</title><rect x="20.9019%" y="293" width="0.0374%" height="15" fill="rgb(248,225,23)" fg:x="33548" fg:w="60"/><text x="20.9319%" y="303.50"></text></g><g><title>[unknown] (60 samples, 0.04%)</title><rect x="20.9019%" y="277" width="0.0374%" height="15" fill="rgb(250,108,0)" fg:x="33548" fg:w="60"/><text x="20.9319%" y="287.50"></text></g><g><title>[unknown] (60 samples, 0.04%)</title><rect x="20.9019%" y="261" width="0.0374%" height="15" fill="rgb(228,208,7)" fg:x="33548" fg:w="60"/><text x="20.9319%" y="271.50"></text></g><g><title>[unknown] (59 samples, 0.04%)</title><rect x="20.9025%" y="245" width="0.0368%" height="15" fill="rgb(244,45,10)" fg:x="33549" fg:w="59"/><text x="20.9325%" y="255.50"></text></g><g><title>[unknown] (57 samples, 0.04%)</title><rect x="20.9038%" y="229" width="0.0355%" height="15" fill="rgb(207,125,25)" fg:x="33551" fg:w="57"/><text x="20.9338%" y="239.50"></text></g><g><title>[unknown] (56 samples, 0.03%)</title><rect x="20.9044%" y="213" width="0.0349%" height="15" fill="rgb(210,195,18)" fg:x="33552" fg:w="56"/><text x="20.9344%" y="223.50"></text></g><g><title>[unknown] (50 samples, 0.03%)</title><rect x="20.9082%" y="197" width="0.0312%" height="15" fill="rgb(249,80,12)" fg:x="33558" fg:w="50"/><text x="20.9382%" y="207.50"></text></g><g><title>[unknown] (49 samples, 0.03%)</title><rect x="20.9088%" y="181" width="0.0305%" height="15" fill="rgb(221,65,9)" fg:x="33559" fg:w="49"/><text x="20.9388%" y="191.50"></text></g><g><title>qsvlite::util::count_rows (900 samples, 0.56%)</title><rect x="20.8851%" y="405" width="0.5607%" height="15" fill="rgb(235,49,36)" fg:x="33521" fg:w="900"/><text x="20.9151%" y="415.50">qsvli..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (898 samples, 0.56%)</title><rect x="20.8863%" y="389" width="0.5595%" height="15" fill="rgb(225,32,20)" fg:x="33523" fg:w="898"/><text x="20.9163%" y="399.50">csv::..</text></g><g><title>csv_core::reader::Reader::read_record (813 samples, 0.51%)</title><rect x="20.9393%" y="373" width="0.5065%" height="15" fill="rgb(215,141,46)" fg:x="33608" fg:w="813"/><text x="20.9693%" y="383.50">csv_c..</text></g><g><title>qsvlite::main (4,940 samples, 3.08%)</title><rect x="18.3755%" y="453" width="3.0778%" height="15" fill="rgb(250,160,47)" fg:x="29493" fg:w="4940"/><text x="18.4055%" y="463.50">qsvlite::main</text></g><g><title>qsvlite::Command::run (4,940 samples, 3.08%)</title><rect x="18.3755%" y="437" width="3.0778%" height="15" fill="rgb(216,222,40)" fg:x="29493" fg:w="4940"/><text x="18.4055%" y="447.50">qsvlite::Command::run</text></g><g><title>qsvlite::cmd::validate::run (4,940 samples, 3.08%)</title><rect x="18.3755%" y="421" width="3.0778%" height="15" fill="rgb(234,217,39)" fg:x="29493" fg:w="4940"/><text x="18.4055%" y="431.50">qsvlite::cmd::validate::run</text></g><g><title>jsonschema::keywords::helpers::equal (741 samples, 0.46%)</title><rect x="21.4652%" y="261" width="0.4617%" height="15" fill="rgb(207,178,40)" fg:x="34452" fg:w="741"/><text x="21.4952%" y="271.50">json..</text></g><g><title>__memcmp_avx2_movbe (112 samples, 0.07%)</title><rect x="21.8570%" y="245" width="0.0698%" height="15" fill="rgb(221,136,13)" fg:x="35081" fg:w="112"/><text x="21.8870%" y="255.50"></text></g><g><title>&lt;jsonschema::keywords::enum_::EnumValidator as jsonschema::validator::Validate&gt;::validate (756 samples, 0.47%)</title><rect x="21.4564%" y="277" width="0.4710%" height="15" fill="rgb(249,199,10)" fg:x="34438" fg:w="756"/><text x="21.4864%" y="287.50">&lt;jso..</text></g><g><title>&lt;core::iter::sources::empty::Empty&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 0.10%)</title><rect x="22.4003%" y="261" width="0.0966%" height="15" fill="rgb(249,222,13)" fg:x="35953" fg:w="155"/><text x="22.4303%" y="271.50"></text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (1,684 samples, 1.05%)</title><rect x="21.4564%" y="341" width="1.0492%" height="15" fill="rgb(244,185,38)" fg:x="34438" fg:w="1684"/><text x="21.4864%" y="351.50">jsonschema::..</text></g><g><title>&lt;jsonschema::keywords::properties::PropertiesValidator as jsonschema::validator::Validate&gt;::apply (1,684 samples, 1.05%)</title><rect x="21.4564%" y="325" width="1.0492%" height="15" fill="rgb(236,202,9)" fg:x="34438" fg:w="1684"/><text x="21.4864%" y="335.50">&lt;jsonschema:..</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (1,684 samples, 1.05%)</title><rect x="21.4564%" y="309" width="1.0492%" height="15" fill="rgb(250,229,37)" fg:x="34438" fg:w="1684"/><text x="21.4864%" y="319.50">jsonschema::..</text></g><g><title>jsonschema::validator::Validate::apply (1,684 samples, 1.05%)</title><rect x="21.4564%" y="293" width="1.0492%" height="15" fill="rgb(206,174,23)" fg:x="34438" fg:w="1684"/><text x="21.4864%" y="303.50">jsonschema::..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (928 samples, 0.58%)</title><rect x="21.9275%" y="277" width="0.5782%" height="15" fill="rgb(211,33,43)" fg:x="35194" fg:w="928"/><text x="21.9575%" y="287.50">core::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,533 samples, 1.58%)</title><rect x="26.2800%" y="261" width="1.5782%" height="15" fill="rgb(245,58,50)" fg:x="42180" fg:w="2533"/><text x="26.3100%" y="271.50">&lt;std::collections::h..</text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="27.8582%" y="261" width="0.0118%" height="15" fill="rgb(244,68,36)" fg:x="44713" fg:w="19"/><text x="27.8882%" y="271.50"></text></g><g><title>_mi_malloc_generic (56 samples, 0.03%)</title><rect x="27.9187%" y="245" width="0.0349%" height="15" fill="rgb(232,229,15)" fg:x="44810" fg:w="56"/><text x="27.9487%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (718 samples, 0.45%)</title><rect x="27.8701%" y="261" width="0.4473%" height="15" fill="rgb(254,30,23)" fg:x="44732" fg:w="718"/><text x="27.9001%" y="271.50">allo..</text></g><g><title>mi_malloc (584 samples, 0.36%)</title><rect x="27.9535%" y="245" width="0.3639%" height="15" fill="rgb(235,160,14)" fg:x="44866" fg:w="584"/><text x="27.9835%" y="255.50">mi_..</text></g><g><title>__memset_avx2_unaligned_erms (69 samples, 0.04%)</title><rect x="28.9498%" y="245" width="0.0430%" height="15" fill="rgb(212,155,44)" fg:x="46465" fg:w="69"/><text x="28.9798%" y="255.50"></text></g><g><title>_mi_malloc_generic (17 samples, 0.01%)</title><rect x="28.9928%" y="245" width="0.0106%" height="15" fill="rgb(226,2,50)" fg:x="46534" fg:w="17"/><text x="29.0228%" y="255.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (11,399 samples, 7.10%)</title><rect x="22.5056%" y="293" width="7.1021%" height="15" fill="rgb(234,177,6)" fg:x="36122" fg:w="11399"/><text x="22.5356%" y="303.50">serde::ser::SerializeMap::serialize_entry</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (11,399 samples, 7.10%)</title><rect x="22.5056%" y="277" width="7.1021%" height="15" fill="rgb(217,24,9)" fg:x="36122" fg:w="11399"/><text x="22.5356%" y="287.50">serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,071 samples, 1.29%)</title><rect x="28.3174%" y="261" width="1.2903%" height="15" fill="rgb(220,13,46)" fg:x="45450" fg:w="2071"/><text x="28.3474%" y="271.50">hashbrown::raw::..</text></g><g><title>mi_malloc (970 samples, 0.60%)</title><rect x="29.0034%" y="245" width="0.6044%" height="15" fill="rgb(239,221,27)" fg:x="46551" fg:w="970"/><text x="29.0334%" y="255.50">mi_mal..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (23 samples, 0.01%)</title><rect x="29.6077%" y="293" width="0.0143%" height="15" fill="rgb(222,198,25)" fg:x="47521" fg:w="23"/><text x="29.6377%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.01%)</title><rect x="29.6077%" y="277" width="0.0143%" height="15" fill="rgb(211,99,13)" fg:x="47521" fg:w="23"/><text x="29.6377%" y="287.50"></text></g><g><title>_mi_malloc_generic (23 samples, 0.01%)</title><rect x="29.6077%" y="261" width="0.0143%" height="15" fill="rgb(232,111,31)" fg:x="47521" fg:w="23"/><text x="29.6377%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (108 samples, 0.07%)</title><rect x="29.7180%" y="261" width="0.0673%" height="15" fill="rgb(245,82,37)" fg:x="47698" fg:w="108"/><text x="29.7480%" y="271.50"></text></g><g><title>_mi_malloc_generic (21 samples, 0.01%)</title><rect x="29.7853%" y="261" width="0.0131%" height="15" fill="rgb(227,149,46)" fg:x="47806" fg:w="21"/><text x="29.8153%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (12,178 samples, 7.59%)</title><rect x="22.5056%" y="309" width="7.5874%" height="15" fill="rgb(218,36,50)" fg:x="36122" fg:w="12178"/><text x="22.5356%" y="319.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (756 samples, 0.47%)</title><rect x="29.6221%" y="293" width="0.4710%" height="15" fill="rgb(226,80,48)" fg:x="47544" fg:w="756"/><text x="29.6521%" y="303.50">serd..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (756 samples, 0.47%)</title><rect x="29.6221%" y="277" width="0.4710%" height="15" fill="rgb(238,224,15)" fg:x="47544" fg:w="756"/><text x="29.6521%" y="287.50">serd..</text></g><g><title>mi_malloc (473 samples, 0.29%)</title><rect x="29.7984%" y="261" width="0.2947%" height="15" fill="rgb(241,136,10)" fg:x="47827" fg:w="473"/><text x="29.8284%" y="271.50">mi..</text></g><g><title>__memmove_avx_unaligned_erms (714 samples, 0.44%)</title><rect x="30.3878%" y="261" width="0.4449%" height="15" fill="rgb(208,32,45)" fg:x="48773" fg:w="714"/><text x="30.4178%" y="271.50">__me..</text></g><g><title>__memmove_avx_unaligned_erms (401 samples, 0.25%)</title><rect x="30.8738%" y="229" width="0.2498%" height="15" fill="rgb(207,135,9)" fg:x="49553" fg:w="401"/><text x="30.9038%" y="239.50">_..</text></g><g><title>_mi_malloc_generic (154 samples, 0.10%)</title><rect x="31.1248%" y="229" width="0.0959%" height="15" fill="rgb(206,86,44)" fg:x="49956" fg:w="154"/><text x="31.1548%" y="239.50"></text></g><g><title>_mi_page_free_collect (35 samples, 0.02%)</title><rect x="31.1990%" y="213" width="0.0218%" height="15" fill="rgb(245,177,15)" fg:x="50075" fg:w="35"/><text x="31.2290%" y="223.50"></text></g><g><title>_mi_page_retire (30 samples, 0.02%)</title><rect x="31.2208%" y="229" width="0.0187%" height="15" fill="rgb(206,64,50)" fg:x="50110" fg:w="30"/><text x="31.2508%" y="239.50"></text></g><g><title>_mi_heap_realloc_zero (683 samples, 0.43%)</title><rect x="30.8364%" y="245" width="0.4255%" height="15" fill="rgb(234,36,40)" fg:x="49493" fg:w="683"/><text x="30.8664%" y="255.50">_mi_..</text></g><g><title>mi_free (36 samples, 0.02%)</title><rect x="31.2395%" y="229" width="0.0224%" height="15" fill="rgb(213,64,8)" fg:x="50140" fg:w="36"/><text x="31.2695%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (697 samples, 0.43%)</title><rect x="30.8326%" y="261" width="0.4343%" height="15" fill="rgb(210,75,36)" fg:x="49487" fg:w="697"/><text x="30.8626%" y="271.50">allo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::Annotations&gt;&gt;&gt; (137 samples, 0.09%)</title><rect x="31.2669%" y="261" width="0.0854%" height="15" fill="rgb(229,88,21)" fg:x="50184" fg:w="137"/><text x="31.2969%" y="271.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2,280 samples, 1.42%)</title><rect x="30.0931%" y="277" width="1.4205%" height="15" fill="rgb(252,204,47)" fg:x="48300" fg:w="2280"/><text x="30.1231%" y="287.50">&lt;alloc::collection..</text></g><g><title>mi_free (259 samples, 0.16%)</title><rect x="31.3523%" y="261" width="0.1614%" height="15" fill="rgb(208,77,27)" fg:x="50321" fg:w="259"/><text x="31.3823%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,043 samples, 0.65%)</title><rect x="35.2899%" y="261" width="0.6498%" height="15" fill="rgb(221,76,26)" fg:x="56641" fg:w="1043"/><text x="35.3199%" y="271.50">__memmo..</text></g><g><title>_mi_deferred_free (153 samples, 0.10%)</title><rect x="36.9858%" y="245" width="0.0953%" height="15" fill="rgb(225,139,18)" fg:x="59363" fg:w="153"/><text x="37.0158%" y="255.50"></text></g><g><title>_mi_malloc_generic (1,825 samples, 1.14%)</title><rect x="35.9472%" y="261" width="1.1371%" height="15" fill="rgb(230,137,11)" fg:x="57696" fg:w="1825"/><text x="35.9772%" y="271.50">_mi_malloc_gen..</text></g><g><title>[qsvlite] (31 samples, 0.02%)</title><rect x="37.6812%" y="245" width="0.0193%" height="15" fill="rgb(212,28,1)" fg:x="60479" fg:w="31"/><text x="37.7112%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.02%)</title><rect x="37.6812%" y="229" width="0.0193%" height="15" fill="rgb(248,164,17)" fg:x="60479" fg:w="31"/><text x="37.7112%" y="239.50"></text></g><g><title>mi_heap_realloc (52 samples, 0.03%)</title><rect x="37.9702%" y="229" width="0.0324%" height="15" fill="rgb(222,171,42)" fg:x="60943" fg:w="52"/><text x="38.0002%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,741 samples, 1.08%)</title><rect x="37.0868%" y="261" width="1.0847%" height="15" fill="rgb(243,84,45)" fg:x="59525" fg:w="1741"/><text x="37.1168%" y="271.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::finish_grow (754 samples, 0.47%)</title><rect x="37.7017%" y="245" width="0.4698%" height="15" fill="rgb(252,49,23)" fg:x="60512" fg:w="754"/><text x="37.7317%" y="255.50">allo..</text></g><g><title>mi_realloc (271 samples, 0.17%)</title><rect x="38.0026%" y="229" width="0.1688%" height="15" fill="rgb(215,19,7)" fg:x="60995" fg:w="271"/><text x="38.0326%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::ErrorDescription&gt;&gt;&gt; (190 samples, 0.12%)</title><rect x="38.1715%" y="261" width="0.1184%" height="15" fill="rgb(238,81,41)" fg:x="61266" fg:w="190"/><text x="38.2015%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (49 samples, 0.03%)</title><rect x="38.4039%" y="245" width="0.0305%" height="15" fill="rgb(210,199,37)" fg:x="61639" fg:w="49"/><text x="38.4339%" y="255.50"></text></g><g><title>jsonschema::paths::InstancePath::to_vec (1,139 samples, 0.71%)</title><rect x="38.2899%" y="261" width="0.7096%" height="15" fill="rgb(244,192,49)" fg:x="61456" fg:w="1139"/><text x="38.3199%" y="271.50">jsonsche..</text></g><g><title>mi_malloc (904 samples, 0.56%)</title><rect x="38.4363%" y="245" width="0.5632%" height="15" fill="rgb(226,211,11)" fg:x="61691" fg:w="904"/><text x="38.4663%" y="255.50">mi_ma..</text></g><g><title>_mi_malloc_generic (310 samples, 0.19%)</title><rect x="39.2830%" y="245" width="0.1931%" height="15" fill="rgb(236,162,54)" fg:x="63050" fg:w="310"/><text x="39.3130%" y="255.50"></text></g><g><title>jsonschema::validator::Validate::apply (1,077 samples, 0.67%)</title><rect x="38.9995%" y="261" width="0.6710%" height="15" fill="rgb(220,229,9)" fg:x="62595" fg:w="1077"/><text x="39.0295%" y="271.50">jsonsch..</text></g><g><title>mi_malloc (307 samples, 0.19%)</title><rect x="39.4793%" y="245" width="0.1913%" height="15" fill="rgb(250,87,22)" fg:x="63365" fg:w="307"/><text x="39.5093%" y="255.50"></text></g><g><title>mi_free (3,632 samples, 2.26%)</title><rect x="39.6705%" y="261" width="2.2629%" height="15" fill="rgb(239,43,17)" fg:x="63672" fg:w="3632"/><text x="39.7005%" y="271.50">mi_free</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (20,749 samples, 12.93%)</title><rect x="31.5136%" y="277" width="12.9276%" height="15" fill="rgb(231,177,25)" fg:x="50580" fg:w="20749"/><text x="31.5436%" y="287.50">jsonschema::schema_node::SchemaNode::apply_rooted</text></g><g><title>mi_malloc (4,025 samples, 2.51%)</title><rect x="41.9334%" y="261" width="2.5078%" height="15" fill="rgb(219,179,1)" fg:x="67304" fg:w="4025"/><text x="41.9634%" y="271.50">mi_malloc</text></g><g><title>&lt;jsonschema::keywords::properties::PropertiesValidator as jsonschema::validator::Validate&gt;::apply (23,085 samples, 14.38%)</title><rect x="30.0931%" y="293" width="14.3830%" height="15" fill="rgb(238,219,53)" fg:x="48300" fg:w="23085"/><text x="30.1231%" y="303.50">&lt;jsonschema::keywords::properties::PropertiesValidator as jsonschema::validator::Validate&gt;::apply</text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt; for serde_json::value::Value&gt;::from (56 samples, 0.03%)</title><rect x="44.4412%" y="277" width="0.0349%" height="15" fill="rgb(232,167,36)" fg:x="71329" fg:w="56"/><text x="44.4712%" y="287.50"></text></g><g><title>_mi_malloc_generic (56 samples, 0.03%)</title><rect x="44.4412%" y="261" width="0.0349%" height="15" fill="rgb(244,19,51)" fg:x="71329" fg:w="56"/><text x="44.4712%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (35,285 samples, 21.98%)</title><rect x="22.5056%" y="325" width="21.9841%" height="15" fill="rgb(224,6,22)" fg:x="36122" fg:w="35285"/><text x="22.5356%" y="335.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (23,107 samples, 14.40%)</title><rect x="30.0931%" y="309" width="14.3967%" height="15" fill="rgb(224,145,5)" fg:x="48300" fg:w="23107"/><text x="30.1231%" y="319.50">jsonschema::schema_node::SchemaNode::apply_rooted</text></g><g><title>jsonschema::validator::Validate::apply (22 samples, 0.01%)</title><rect x="44.4761%" y="293" width="0.0137%" height="15" fill="rgb(234,130,49)" fg:x="71385" fg:w="22"/><text x="44.5061%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 0.01%)</title><rect x="44.4761%" y="277" width="0.0137%" height="15" fill="rgb(254,6,2)" fg:x="71385" fg:w="22"/><text x="44.5061%" y="287.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (36,970 samples, 23.03%)</title><rect x="21.4564%" y="357" width="23.0340%" height="15" fill="rgb(208,96,46)" fg:x="34438" fg:w="36970"/><text x="21.4864%" y="367.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (35,286 samples, 21.98%)</title><rect x="22.5056%" y="341" width="21.9848%" height="15" fill="rgb(239,3,39)" fg:x="36122" fg:w="35286"/><text x="22.5356%" y="351.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (36,977 samples, 23.04%)</title><rect x="21.4533%" y="389" width="23.0383%" height="15" fill="rgb(233,210,1)" fg:x="34433" fg:w="36977"/><text x="21.4833%" y="399.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (36,972 samples, 23.04%)</title><rect x="21.4564%" y="373" width="23.0352%" height="15" fill="rgb(244,137,37)" fg:x="34438" fg:w="36972"/><text x="21.4864%" y="383.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (36,985 samples, 23.04%)</title><rect x="21.4533%" y="421" width="23.0433%" height="15" fill="rgb(240,136,2)" fg:x="34433" fg:w="36985"/><text x="21.4833%" y="431.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (36,985 samples, 23.04%)</title><rect x="21.4533%" y="405" width="23.0433%" height="15" fill="rgb(239,18,37)" fg:x="34433" fg:w="36985"/><text x="21.4833%" y="415.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (55 samples, 0.03%)</title><rect x="44.5415%" y="197" width="0.0343%" height="15" fill="rgb(218,185,22)" fg:x="71490" fg:w="55"/><text x="44.5715%" y="207.50"></text></g><g><title>mi_free (31 samples, 0.02%)</title><rect x="44.5565%" y="181" width="0.0193%" height="15" fill="rgb(225,218,4)" fg:x="71514" fg:w="31"/><text x="44.5865%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (18 samples, 0.01%)</title><rect x="44.5857%" y="181" width="0.0112%" height="15" fill="rgb(230,182,32)" fg:x="71561" fg:w="18"/><text x="44.6157%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (74 samples, 0.05%)</title><rect x="44.5758%" y="197" width="0.0461%" height="15" fill="rgb(242,56,43)" fg:x="71545" fg:w="74"/><text x="44.6058%" y="207.50"></text></g><g><title>mi_free (40 samples, 0.02%)</title><rect x="44.5970%" y="181" width="0.0249%" height="15" fill="rgb(233,99,24)" fg:x="71579" fg:w="40"/><text x="44.6270%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (256 samples, 0.16%)</title><rect x="44.5097%" y="213" width="0.1595%" height="15" fill="rgb(234,209,42)" fg:x="71439" fg:w="256"/><text x="44.5397%" y="223.50"></text></g><g><title>mi_free (76 samples, 0.05%)</title><rect x="44.6219%" y="197" width="0.0474%" height="15" fill="rgb(227,7,12)" fg:x="71619" fg:w="76"/><text x="44.6519%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (33 samples, 0.02%)</title><rect x="44.6692%" y="213" width="0.0206%" height="15" fill="rgb(245,203,43)" fg:x="71695" fg:w="33"/><text x="44.6992%" y="223.50"></text></g><g><title>mi_free (22 samples, 0.01%)</title><rect x="44.6761%" y="197" width="0.0137%" height="15" fill="rgb(238,205,33)" fg:x="71706" fg:w="22"/><text x="44.7061%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (319 samples, 0.20%)</title><rect x="44.5072%" y="245" width="0.1988%" height="15" fill="rgb(231,56,7)" fg:x="71435" fg:w="319"/><text x="44.5372%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (318 samples, 0.20%)</title><rect x="44.5079%" y="229" width="0.1981%" height="15" fill="rgb(244,186,29)" fg:x="71436" fg:w="318"/><text x="44.5379%" y="239.50"></text></g><g><title>mi_free (26 samples, 0.02%)</title><rect x="44.6898%" y="213" width="0.0162%" height="15" fill="rgb(234,111,31)" fg:x="71728" fg:w="26"/><text x="44.7198%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (33 samples, 0.02%)</title><rect x="44.7396%" y="213" width="0.0206%" height="15" fill="rgb(241,149,10)" fg:x="71808" fg:w="33"/><text x="44.7696%" y="223.50"></text></g><g><title>mi_free (20 samples, 0.01%)</title><rect x="44.7477%" y="197" width="0.0125%" height="15" fill="rgb(249,206,44)" fg:x="71821" fg:w="20"/><text x="44.7777%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonschema::output::BasicOutput&gt; (147 samples, 0.09%)</title><rect x="44.7060%" y="245" width="0.0916%" height="15" fill="rgb(251,153,30)" fg:x="71754" fg:w="147"/><text x="44.7360%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::Annotations&gt;&gt; (139 samples, 0.09%)</title><rect x="44.7110%" y="229" width="0.0866%" height="15" fill="rgb(239,152,38)" fg:x="71762" fg:w="139"/><text x="44.7410%" y="239.50"></text></g><g><title>mi_free (60 samples, 0.04%)</title><rect x="44.7602%" y="213" width="0.0374%" height="15" fill="rgb(249,139,47)" fg:x="71841" fg:w="60"/><text x="44.7902%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (25 samples, 0.02%)</title><rect x="44.8032%" y="245" width="0.0156%" height="15" fill="rgb(244,64,35)" fg:x="71910" fg:w="25"/><text x="44.8332%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (114 samples, 0.07%)</title><rect x="44.9839%" y="229" width="0.0710%" height="15" fill="rgb(216,46,15)" fg:x="72200" fg:w="114"/><text x="45.0139%" y="239.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (435 samples, 0.27%)</title><rect x="44.8188%" y="245" width="0.2710%" height="15" fill="rgb(250,74,19)" fg:x="71935" fg:w="435"/><text x="44.8488%" y="255.50">i..</text></g><g><title>__memcmp_avx2_movbe (54 samples, 0.03%)</title><rect x="45.0561%" y="229" width="0.0336%" height="15" fill="rgb(249,42,33)" fg:x="72316" fg:w="54"/><text x="45.0861%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (66 samples, 0.04%)</title><rect x="45.2007%" y="229" width="0.0411%" height="15" fill="rgb(242,149,17)" fg:x="72548" fg:w="66"/><text x="45.2307%" y="239.50"></text></g><g><title>_mi_heap_realloc_zero (39 samples, 0.02%)</title><rect x="45.2424%" y="213" width="0.0243%" height="15" fill="rgb(244,29,21)" fg:x="72615" fg:w="39"/><text x="45.2724%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (44 samples, 0.03%)</title><rect x="45.2418%" y="229" width="0.0274%" height="15" fill="rgb(220,130,37)" fg:x="72614" fg:w="44"/><text x="45.2718%" y="239.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,300 samples, 0.81%)</title><rect x="44.5035%" y="261" width="0.8100%" height="15" fill="rgb(211,67,2)" fg:x="71429" fg:w="1300"/><text x="44.5335%" y="271.50">rayon::it..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (359 samples, 0.22%)</title><rect x="45.0898%" y="245" width="0.2237%" height="15" fill="rgb(235,68,52)" fg:x="72370" fg:w="359"/><text x="45.1198%" y="255.50">s..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (71 samples, 0.04%)</title><rect x="45.2692%" y="229" width="0.0442%" height="15" fill="rgb(246,142,3)" fg:x="72658" fg:w="71"/><text x="45.2992%" y="239.50"></text></g><g><title>mi_malloc (20 samples, 0.01%)</title><rect x="45.3010%" y="213" width="0.0125%" height="15" fill="rgb(241,25,7)" fg:x="72709" fg:w="20"/><text x="45.3310%" y="223.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,309 samples, 0.82%)</title><rect x="44.4985%" y="293" width="0.8156%" height="15" fill="rgb(242,119,39)" fg:x="71421" fg:w="1309"/><text x="44.5285%" y="303.50">rayon::it..</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,301 samples, 0.81%)</title><rect x="44.5035%" y="277" width="0.8106%" height="15" fill="rgb(241,98,45)" fg:x="71429" fg:w="1301"/><text x="44.5335%" y="287.50">rayon_cor..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,313 samples, 0.82%)</title><rect x="44.4966%" y="325" width="0.8181%" height="15" fill="rgb(254,28,30)" fg:x="71418" fg:w="1313"/><text x="44.5266%" y="335.50">rayon::it..</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,310 samples, 0.82%)</title><rect x="44.4985%" y="309" width="0.8162%" height="15" fill="rgb(241,142,54)" fg:x="71421" fg:w="1310"/><text x="44.5285%" y="319.50">rayon_cor..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,314 samples, 0.82%)</title><rect x="44.4966%" y="357" width="0.8187%" height="15" fill="rgb(222,85,15)" fg:x="71418" fg:w="1314"/><text x="44.5266%" y="367.50">rayon::it..</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,314 samples, 0.82%)</title><rect x="44.4966%" y="341" width="0.8187%" height="15" fill="rgb(210,85,47)" fg:x="71418" fg:w="1314"/><text x="44.5266%" y="351.50">rayon_cor..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (38,304 samples, 23.87%)</title><rect x="21.4533%" y="453" width="23.8651%" height="15" fill="rgb(224,206,25)" fg:x="34433" fg:w="38304"/><text x="21.4833%" y="463.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (38,304 samples, 23.87%)</title><rect x="21.4533%" y="437" width="23.8651%" height="15" fill="rgb(243,201,19)" fg:x="34433" fg:w="38304"/><text x="21.4833%" y="447.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1,319 samples, 0.82%)</title><rect x="44.4966%" y="421" width="0.8218%" height="15" fill="rgb(236,59,4)" fg:x="71418" fg:w="1319"/><text x="44.5266%" y="431.50">rayon_cor..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1,319 samples, 0.82%)</title><rect x="44.4966%" y="405" width="0.8218%" height="15" fill="rgb(254,179,45)" fg:x="71418" fg:w="1319"/><text x="44.5266%" y="415.50">&lt;rayon_co..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,319 samples, 0.82%)</title><rect x="44.4966%" y="389" width="0.8218%" height="15" fill="rgb(226,14,10)" fg:x="71418" fg:w="1319"/><text x="44.5266%" y="399.50">rayon::it..</text></g><g><title>rayon_core::join::join_context::{{closure}} (1,319 samples, 0.82%)</title><rect x="44.4966%" y="373" width="0.8218%" height="15" fill="rgb(244,27,41)" fg:x="71418" fg:w="1319"/><text x="44.5266%" y="383.50">rayon_cor..</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (22 samples, 0.01%)</title><rect x="45.3191%" y="357" width="0.0137%" height="15" fill="rgb(235,35,32)" fg:x="72738" fg:w="22"/><text x="45.3491%" y="367.50"></text></g><g><title>&lt;jsonschema::keywords::properties::PropertiesValidator as jsonschema::validator::Validate&gt;::apply (22 samples, 0.01%)</title><rect x="45.3191%" y="341" width="0.0137%" height="15" fill="rgb(218,68,31)" fg:x="72738" fg:w="22"/><text x="45.3491%" y="351.50"></text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (22 samples, 0.01%)</title><rect x="45.3191%" y="325" width="0.0137%" height="15" fill="rgb(207,120,37)" fg:x="72738" fg:w="22"/><text x="45.3491%" y="335.50"></text></g><g><title>jsonschema::validator::Validate::apply (22 samples, 0.01%)</title><rect x="45.3191%" y="309" width="0.0137%" height="15" fill="rgb(227,98,0)" fg:x="72738" fg:w="22"/><text x="45.3491%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 0.01%)</title><rect x="45.3191%" y="293" width="0.0137%" height="15" fill="rgb(207,7,3)" fg:x="72738" fg:w="22"/><text x="45.3491%" y="303.50"></text></g><g><title>&lt;jsonschema::error::ValidationError as core::fmt::Display&gt;::fmt (22 samples, 0.01%)</title><rect x="45.3191%" y="277" width="0.0137%" height="15" fill="rgb(206,98,19)" fg:x="72738" fg:w="22"/><text x="45.3491%" y="287.50"></text></g><g><title>core::fmt::write (22 samples, 0.01%)</title><rect x="45.3191%" y="261" width="0.0137%" height="15" fill="rgb(217,5,26)" fg:x="72738" fg:w="22"/><text x="45.3491%" y="271.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (22 samples, 0.01%)</title><rect x="45.3191%" y="245" width="0.0137%" height="15" fill="rgb(235,190,38)" fg:x="72738" fg:w="22"/><text x="45.3491%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::Annotations&gt;&gt;&gt; (668 samples, 0.42%)</title><rect x="45.7571%" y="261" width="0.4162%" height="15" fill="rgb(247,86,24)" fg:x="73441" fg:w="668"/><text x="45.7871%" y="271.50">cor..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2,314 samples, 1.44%)</title><rect x="45.3328%" y="277" width="1.4417%" height="15" fill="rgb(205,101,16)" fg:x="72760" fg:w="2314"/><text x="45.3628%" y="287.50">&lt;alloc::collection..</text></g><g><title>mi_free (965 samples, 0.60%)</title><rect x="46.1733%" y="261" width="0.6012%" height="15" fill="rgb(246,168,33)" fg:x="74109" fg:w="965"/><text x="46.2033%" y="271.50">mi_free</text></g><g><title>__memmove_avx_unaligned_erms (486 samples, 0.30%)</title><rect x="48.1402%" y="261" width="0.3028%" height="15" fill="rgb(231,114,1)" fg:x="77266" fg:w="486"/><text x="48.1702%" y="271.50">__..</text></g><g><title>_mi_malloc_generic (106 samples, 0.07%)</title><rect x="48.4436%" y="261" width="0.0660%" height="15" fill="rgb(207,184,53)" fg:x="77753" fg:w="106"/><text x="48.4736%" y="271.50"></text></g><g><title>_mi_page_free_collect (18 samples, 0.01%)</title><rect x="48.4985%" y="245" width="0.0112%" height="15" fill="rgb(224,95,51)" fg:x="77841" fg:w="18"/><text x="48.5285%" y="255.50"></text></g><g><title>&lt;jsonschema::paths::JSONPointer as core::clone::Clone&gt;::clone (6,832 samples, 4.26%)</title><rect x="46.7745%" y="277" width="4.2566%" height="15" fill="rgb(212,188,45)" fg:x="75074" fg:w="6832"/><text x="46.8045%" y="287.50">&lt;jsonschema::paths::JSONPointer as core::clone::Clone&gt;::cl..</text></g><g><title>mi_malloc (4,046 samples, 2.52%)</title><rect x="48.5103%" y="261" width="2.5208%" height="15" fill="rgb(223,154,38)" fg:x="77860" fg:w="4046"/><text x="48.5403%" y="271.50">mi_malloc</text></g><g><title>_mi_heap_delayed_free (347 samples, 0.22%)</title><rect x="51.0311%" y="261" width="0.2162%" height="15" fill="rgb(251,22,52)" fg:x="81906" fg:w="347"/><text x="51.0611%" y="271.50">_..</text></g><g><title>_mi_malloc_generic (953 samples, 0.59%)</title><rect x="51.0311%" y="277" width="0.5938%" height="15" fill="rgb(229,209,22)" fg:x="81906" fg:w="953"/><text x="51.0611%" y="287.50">_mi_ma..</text></g><g><title>_mi_page_free_collect (606 samples, 0.38%)</title><rect x="51.2473%" y="261" width="0.3776%" height="15" fill="rgb(234,138,34)" fg:x="82253" fg:w="606"/><text x="51.2773%" y="271.50">_mi..</text></g><g><title>[qsvlite] (61 samples, 0.04%)</title><rect x="53.5632%" y="229" width="0.0380%" height="15" fill="rgb(212,95,11)" fg:x="85970" fg:w="61"/><text x="53.5932%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (344 samples, 0.21%)</title><rect x="53.6062%" y="229" width="0.2143%" height="15" fill="rgb(240,179,47)" fg:x="86039" fg:w="344"/><text x="53.6362%" y="239.50">_..</text></g><g><title>_mi_malloc_generic (130 samples, 0.08%)</title><rect x="53.8211%" y="229" width="0.0810%" height="15" fill="rgb(240,163,11)" fg:x="86384" fg:w="130"/><text x="53.8511%" y="239.50"></text></g><g><title>_mi_page_free_collect (27 samples, 0.02%)</title><rect x="53.8853%" y="213" width="0.0168%" height="15" fill="rgb(236,37,12)" fg:x="86487" fg:w="27"/><text x="53.9153%" y="223.50"></text></g><g><title>_mi_page_retire (34 samples, 0.02%)</title><rect x="53.9021%" y="229" width="0.0212%" height="15" fill="rgb(232,164,16)" fg:x="86514" fg:w="34"/><text x="53.9321%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4,177 samples, 2.60%)</title><rect x="51.6249%" y="277" width="2.6025%" height="15" fill="rgb(244,205,15)" fg:x="82859" fg:w="4177"/><text x="51.6549%" y="287.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reser..</text></g><g><title>alloc::raw_vec::finish_grow (4,177 samples, 2.60%)</title><rect x="51.6249%" y="261" width="2.6025%" height="15" fill="rgb(223,117,47)" fg:x="82859" fg:w="4177"/><text x="51.6549%" y="271.50">alloc::raw_vec::finish_grow</text></g><g><title>_mi_heap_realloc_zero (4,177 samples, 2.60%)</title><rect x="51.6249%" y="245" width="2.6025%" height="15" fill="rgb(244,107,35)" fg:x="82859" fg:w="4177"/><text x="51.6549%" y="255.50">_mi_heap_realloc_zero</text></g><g><title>mi_free (488 samples, 0.30%)</title><rect x="53.9233%" y="229" width="0.3040%" height="15" fill="rgb(205,140,8)" fg:x="86548" fg:w="488"/><text x="53.9533%" y="239.50">mi..</text></g><g><title>jsonschema::paths::InstancePath::to_vec (66 samples, 0.04%)</title><rect x="54.2274%" y="277" width="0.0411%" height="15" fill="rgb(228,84,46)" fg:x="87036" fg:w="66"/><text x="54.2574%" y="287.50"></text></g><g><title>_mi_malloc_generic (66 samples, 0.04%)</title><rect x="54.2274%" y="261" width="0.0411%" height="15" fill="rgb(254,188,9)" fg:x="87036" fg:w="66"/><text x="54.2574%" y="271.50"></text></g><g><title>&lt;jsonschema::keywords::enum_::EnumValidator as jsonschema::validator::Validate&gt;::validate (309 samples, 0.19%)</title><rect x="54.2685%" y="261" width="0.1925%" height="15" fill="rgb(206,112,54)" fg:x="87102" fg:w="309"/><text x="54.2985%" y="271.50"></text></g><g><title>bytecount::num_chars (396 samples, 0.25%)</title><rect x="54.6224%" y="245" width="0.2467%" height="15" fill="rgb(216,84,49)" fg:x="87670" fg:w="396"/><text x="54.6524%" y="255.50">b..</text></g><g><title>&lt;jsonschema::keywords::max_length::MaxLengthValidator as jsonschema::validator::Validate&gt;::validate (694 samples, 0.43%)</title><rect x="54.4610%" y="261" width="0.4324%" height="15" fill="rgb(214,194,35)" fg:x="87411" fg:w="694"/><text x="54.4910%" y="271.50">&lt;jso..</text></g><g><title>bytecount::simd::x86_avx2::chunk_num_chars (39 samples, 0.02%)</title><rect x="54.8691%" y="245" width="0.0243%" height="15" fill="rgb(249,28,3)" fg:x="88066" fg:w="39"/><text x="54.8991%" y="255.50"></text></g><g><title>&lt;jsonschema::keywords::maximum::MaximumF64Validator as jsonschema::validator::Validate&gt;::validate (31 samples, 0.02%)</title><rect x="54.8934%" y="261" width="0.0193%" height="15" fill="rgb(222,56,52)" fg:x="88105" fg:w="31"/><text x="54.9234%" y="271.50"></text></g><g><title>&lt;jsonschema::keywords::maximum::MaximumU64Validator as jsonschema::validator::Validate&gt;::validate (56 samples, 0.03%)</title><rect x="54.9127%" y="261" width="0.0349%" height="15" fill="rgb(245,217,50)" fg:x="88136" fg:w="56"/><text x="54.9427%" y="271.50"></text></g><g><title>bytecount::num_chars (471 samples, 0.29%)</title><rect x="55.1239%" y="245" width="0.2935%" height="15" fill="rgb(213,201,24)" fg:x="88475" fg:w="471"/><text x="55.1539%" y="255.50">by..</text></g><g><title>&lt;jsonschema::keywords::min_length::MinLengthValidator as jsonschema::validator::Validate&gt;::validate (823 samples, 0.51%)</title><rect x="54.9476%" y="261" width="0.5128%" height="15" fill="rgb(248,116,28)" fg:x="88192" fg:w="823"/><text x="54.9776%" y="271.50">&lt;json..</text></g><g><title>bytecount::simd::x86_avx2::chunk_num_chars (69 samples, 0.04%)</title><rect x="55.4174%" y="245" width="0.0430%" height="15" fill="rgb(219,72,43)" fg:x="88946" fg:w="69"/><text x="55.4474%" y="255.50"></text></g><g><title>&lt;jsonschema::keywords::minimum::MinimumF64Validator as jsonschema::validator::Validate&gt;::validate (43 samples, 0.03%)</title><rect x="55.4604%" y="261" width="0.0268%" height="15" fill="rgb(209,138,14)" fg:x="89015" fg:w="43"/><text x="55.4904%" y="271.50"></text></g><g><title>&lt;jsonschema::keywords::minimum::MinimumU64Validator as jsonschema::validator::Validate&gt;::validate (41 samples, 0.03%)</title><rect x="55.4872%" y="261" width="0.0255%" height="15" fill="rgb(222,18,33)" fg:x="89058" fg:w="41"/><text x="55.5172%" y="271.50"></text></g><g><title>&lt;jsonschema::keywords::type_::MultipleTypesValidator as jsonschema::validator::Validate&gt;::validate (352 samples, 0.22%)</title><rect x="55.5158%" y="261" width="0.2193%" height="15" fill="rgb(213,199,7)" fg:x="89104" fg:w="352"/><text x="55.5458%" y="271.50">&lt;..</text></g><g><title>&lt;jsonschema::keywords::type_::StringTypeValidator as jsonschema::validator::Validate&gt;::validate (39 samples, 0.02%)</title><rect x="55.7351%" y="261" width="0.0243%" height="15" fill="rgb(250,110,10)" fg:x="89456" fg:w="39"/><text x="55.7651%" y="271.50"></text></g><g><title>_mi_heap_delayed_free (28 samples, 0.02%)</title><rect x="55.7594%" y="261" width="0.0174%" height="15" fill="rgb(248,123,6)" fg:x="89495" fg:w="28"/><text x="55.7894%" y="271.50"></text></g><g><title>_mi_deferred_free (416 samples, 0.26%)</title><rect x="57.2996%" y="245" width="0.2592%" height="15" fill="rgb(206,91,31)" fg:x="91967" fg:w="416"/><text x="57.3296%" y="255.50">_..</text></g><g><title>_mi_heap_delayed_free (492 samples, 0.31%)</title><rect x="57.5588%" y="245" width="0.3065%" height="15" fill="rgb(211,154,13)" fg:x="92383" fg:w="492"/><text x="57.5888%" y="255.50">_m..</text></g><g><title>_mi_malloc_generic (4,422 samples, 2.76%)</title><rect x="55.7769%" y="261" width="2.7551%" height="15" fill="rgb(225,148,7)" fg:x="89523" fg:w="4422"/><text x="55.8069%" y="271.50">_mi_malloc_generic</text></g><g><title>_mi_page_free_collect (1,070 samples, 0.67%)</title><rect x="57.8653%" y="245" width="0.6667%" height="15" fill="rgb(220,160,43)" fg:x="92875" fg:w="1070"/><text x="57.8953%" y="255.50">_mi_pag..</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (21,189 samples, 13.20%)</title><rect x="45.3328%" y="325" width="13.2017%" height="15" fill="rgb(213,52,39)" fg:x="72760" fg:w="21189"/><text x="45.3628%" y="335.50">jsonschema::schema_node::SchemaNode::apply_rooted</text></g><g><title>&lt;jsonschema::keywords::properties::PropertiesValidator as jsonschema::validator::Validate&gt;::apply (21,189 samples, 13.20%)</title><rect x="45.3328%" y="309" width="13.2017%" height="15" fill="rgb(243,137,7)" fg:x="72760" fg:w="21189"/><text x="45.3628%" y="319.50">&lt;jsonschema::keywords::properties::PropertiesValidator as jsonschema::validator::Validate&gt;::apply</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (21,189 samples, 13.20%)</title><rect x="45.3328%" y="293" width="13.2017%" height="15" fill="rgb(230,79,13)" fg:x="72760" fg:w="21189"/><text x="45.3628%" y="303.50">jsonschema::schema_node::SchemaNode::apply_rooted</text></g><g><title>jsonschema::validator::Validate::apply (6,847 samples, 4.27%)</title><rect x="54.2685%" y="277" width="4.2660%" height="15" fill="rgb(247,105,23)" fg:x="87102" fg:w="6847"/><text x="54.2985%" y="287.50">jsonschema::validator::Validate::apply</text></g><g><title>__memmove_avx_unaligned_erms (61 samples, 0.04%)</title><rect x="60.5245%" y="181" width="0.0380%" height="15" fill="rgb(223,179,41)" fg:x="97143" fg:w="61"/><text x="60.5545%" y="191.50"></text></g><g><title>_mi_heap_realloc_zero (717 samples, 0.45%)</title><rect x="60.1837%" y="197" width="0.4467%" height="15" fill="rgb(218,9,34)" fg:x="96596" fg:w="717"/><text x="60.2137%" y="207.50">_mi_..</text></g><g><title>mi_free (102 samples, 0.06%)</title><rect x="60.5668%" y="181" width="0.0636%" height="15" fill="rgb(222,106,8)" fg:x="97211" fg:w="102"/><text x="60.5968%" y="191.50"></text></g><g><title>mi_malloc (299 samples, 0.19%)</title><rect x="60.6379%" y="197" width="0.1863%" height="15" fill="rgb(211,220,0)" fg:x="97325" fg:w="299"/><text x="60.6679%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (2,585 samples, 1.61%)</title><rect x="59.2423%" y="245" width="1.6106%" height="15" fill="rgb(229,52,16)" fg:x="95085" fg:w="2585"/><text x="59.2723%" y="255.50">&lt;alloc::string::Stri..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,589 samples, 0.99%)</title><rect x="59.8628%" y="229" width="0.9900%" height="15" fill="rgb(212,155,18)" fg:x="96081" fg:w="1589"/><text x="59.8928%" y="239.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::finish_grow (1,189 samples, 0.74%)</title><rect x="60.1120%" y="213" width="0.7408%" height="15" fill="rgb(242,21,14)" fg:x="96481" fg:w="1189"/><text x="60.1420%" y="223.50">alloc::r..</text></g><g><title>mi_realloc (46 samples, 0.03%)</title><rect x="60.8242%" y="197" width="0.0287%" height="15" fill="rgb(222,19,48)" fg:x="97624" fg:w="46"/><text x="60.8542%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (34 samples, 0.02%)</title><rect x="60.8703%" y="229" width="0.0212%" height="15" fill="rgb(232,45,27)" fg:x="97698" fg:w="34"/><text x="60.9003%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.01%)</title><rect x="61.0591%" y="181" width="0.0131%" height="15" fill="rgb(249,103,42)" fg:x="98001" fg:w="21"/><text x="61.0891%" y="191.50"></text></g><g><title>_mi_heap_realloc_zero (205 samples, 0.13%)</title><rect x="60.9693%" y="197" width="0.1277%" height="15" fill="rgb(246,81,33)" fg:x="97857" fg:w="205"/><text x="60.9993%" y="207.50"></text></g><g><title>mi_free (39 samples, 0.02%)</title><rect x="61.0728%" y="181" width="0.0243%" height="15" fill="rgb(252,33,42)" fg:x="98023" fg:w="39"/><text x="61.1028%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (407 samples, 0.25%)</title><rect x="60.8528%" y="245" width="0.2536%" height="15" fill="rgb(209,212,41)" fg:x="97670" fg:w="407"/><text x="60.8828%" y="255.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (345 samples, 0.21%)</title><rect x="60.8915%" y="229" width="0.2150%" height="15" fill="rgb(207,154,6)" fg:x="97732" fg:w="345"/><text x="60.9215%" y="239.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (258 samples, 0.16%)</title><rect x="60.9457%" y="213" width="0.1607%" height="15" fill="rgb(223,64,47)" fg:x="97819" fg:w="258"/><text x="60.9757%" y="223.50"></text></g><g><title>&lt;jsonschema::paths::JSONPointer as core::fmt::Display&gt;::fmt (4,132 samples, 2.57%)</title><rect x="58.5345%" y="261" width="2.5744%" height="15" fill="rgb(211,161,38)" fg:x="93949" fg:w="4132"/><text x="58.5645%" y="271.50">&lt;jsonschema::paths::JSONPointer as..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (4,133 samples, 2.58%)</title><rect x="58.5345%" y="277" width="2.5750%" height="15" fill="rgb(219,138,40)" fg:x="93949" fg:w="4133"/><text x="58.5645%" y="287.50">serde::ser::SerializeMap::serializ..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (298 samples, 0.19%)</title><rect x="61.9444%" y="261" width="0.1857%" height="15" fill="rgb(241,228,46)" fg:x="99422" fg:w="298"/><text x="61.9744%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (162 samples, 0.10%)</title><rect x="62.1351%" y="261" width="0.1009%" height="15" fill="rgb(223,209,38)" fg:x="99728" fg:w="162"/><text x="62.1651%" y="271.50"></text></g><g><title>mi_malloc (144 samples, 0.09%)</title><rect x="62.1463%" y="245" width="0.0897%" height="15" fill="rgb(236,164,45)" fg:x="99746" fg:w="144"/><text x="62.1763%" y="255.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (2,245 samples, 1.40%)</title><rect x="61.1095%" y="277" width="1.3987%" height="15" fill="rgb(231,15,5)" fg:x="98082" fg:w="2245"/><text x="61.1395%" y="287.50">serde_json::map::..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (437 samples, 0.27%)</title><rect x="62.2360%" y="261" width="0.2723%" height="15" fill="rgb(252,35,15)" fg:x="99890" fg:w="437"/><text x="62.2660%" y="271.50">h..</text></g><g><title>mi_malloc (198 samples, 0.12%)</title><rect x="62.3849%" y="245" width="0.1234%" height="15" fill="rgb(248,181,18)" fg:x="100129" fg:w="198"/><text x="62.4149%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (26 samples, 0.02%)</title><rect x="62.6017%" y="261" width="0.0162%" height="15" fill="rgb(233,39,42)" fg:x="100477" fg:w="26"/><text x="62.6317%" y="271.50"></text></g><g><title>_mi_malloc_generic (19 samples, 0.01%)</title><rect x="62.6185%" y="261" width="0.0118%" height="15" fill="rgb(238,110,33)" fg:x="100504" fg:w="19"/><text x="62.6485%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6,601 samples, 4.11%)</title><rect x="58.5345%" y="293" width="4.1127%" height="15" fill="rgb(233,195,10)" fg:x="93949" fg:w="6601"/><text x="58.5645%" y="303.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (223 samples, 0.14%)</title><rect x="62.5083%" y="277" width="0.1389%" height="15" fill="rgb(254,105,3)" fg:x="100327" fg:w="223"/><text x="62.5383%" y="287.50"></text></g><g><title>mi_malloc (27 samples, 0.02%)</title><rect x="62.6304%" y="261" width="0.0168%" height="15" fill="rgb(221,225,9)" fg:x="100523" fg:w="27"/><text x="62.6604%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (231 samples, 0.14%)</title><rect x="62.6759%" y="261" width="0.1439%" height="15" fill="rgb(224,227,45)" fg:x="100596" fg:w="231"/><text x="62.7059%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.02%)</title><rect x="62.8198%" y="261" width="0.0193%" height="15" fill="rgb(229,198,43)" fg:x="100827" fg:w="31"/><text x="62.8498%" y="271.50"></text></g><g><title>_mi_heap_realloc_zero (28 samples, 0.02%)</title><rect x="62.8216%" y="245" width="0.0174%" height="15" fill="rgb(206,209,35)" fg:x="100830" fg:w="28"/><text x="62.8516%" y="255.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (319 samples, 0.20%)</title><rect x="62.6472%" y="277" width="0.1988%" height="15" fill="rgb(245,195,53)" fg:x="100550" fg:w="319"/><text x="62.6772%" y="287.50"></text></g><g><title>__memcmp_avx2_movbe (105 samples, 0.07%)</title><rect x="63.2123%" y="261" width="0.0654%" height="15" fill="rgb(240,92,26)" fg:x="101457" fg:w="105"/><text x="63.2423%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.01%)</title><rect x="63.2777%" y="261" width="0.0137%" height="15" fill="rgb(207,40,23)" fg:x="101562" fg:w="22"/><text x="63.3077%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (337 samples, 0.21%)</title><rect x="63.4185%" y="245" width="0.2100%" height="15" fill="rgb(223,111,35)" fg:x="101788" fg:w="337"/><text x="63.4485%" y="255.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (523 samples, 0.33%)</title><rect x="63.3033%" y="261" width="0.3259%" height="15" fill="rgb(229,147,28)" fg:x="101603" fg:w="523"/><text x="63.3333%" y="271.50">in..</text></g><g><title>mi_free (43 samples, 0.03%)</title><rect x="63.6291%" y="261" width="0.0268%" height="15" fill="rgb(211,29,28)" fg:x="102126" fg:w="43"/><text x="63.6591%" y="271.50"></text></g><g><title>mi_malloc (106 samples, 0.07%)</title><rect x="63.6559%" y="261" width="0.0660%" height="15" fill="rgb(228,72,33)" fg:x="102169" fg:w="106"/><text x="63.6859%" y="271.50"></text></g><g><title>&lt;jsonschema::keywords::properties::PropertiesValidator as jsonschema::validator::Validate&gt;::apply (1,471 samples, 0.92%)</title><rect x="62.8459%" y="277" width="0.9165%" height="15" fill="rgb(205,214,31)" fg:x="100869" fg:w="1471"/><text x="62.8759%" y="287.50">&lt;jsonschem..</text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt; for serde_json::value::Value&gt;::from (65 samples, 0.04%)</title><rect x="63.7219%" y="261" width="0.0405%" height="15" fill="rgb(224,111,15)" fg:x="102275" fg:w="65"/><text x="63.7519%" y="271.50"></text></g><g><title>__memcmp_avx2_movbe (109 samples, 0.07%)</title><rect x="63.9300%" y="245" width="0.0679%" height="15" fill="rgb(253,21,26)" fg:x="102609" fg:w="109"/><text x="63.9600%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (143 samples, 0.09%)</title><rect x="64.0939%" y="229" width="0.0891%" height="15" fill="rgb(245,139,43)" fg:x="102872" fg:w="143"/><text x="64.1239%" y="239.50"></text></g><g><title>&lt;jsonschema::keywords::required::RequiredValidator as jsonschema::validator::Validate&gt;::validate (676 samples, 0.42%)</title><rect x="63.7624%" y="261" width="0.4212%" height="15" fill="rgb(252,170,7)" fg:x="102340" fg:w="676"/><text x="63.7924%" y="271.50">&lt;js..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (298 samples, 0.19%)</title><rect x="63.9980%" y="245" width="0.1857%" height="15" fill="rgb(231,118,14)" fg:x="102718" fg:w="298"/><text x="64.0280%" y="255.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (30,268 samples, 18.86%)</title><rect x="45.3328%" y="341" width="18.8583%" height="15" fill="rgb(238,83,0)" fg:x="72760" fg:w="30268"/><text x="45.3628%" y="351.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (9,079 samples, 5.66%)</title><rect x="58.5345%" y="325" width="5.6566%" height="15" fill="rgb(221,39,39)" fg:x="93949" fg:w="9079"/><text x="58.5645%" y="335.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9,079 samples, 5.66%)</title><rect x="58.5345%" y="309" width="5.6566%" height="15" fill="rgb(222,119,46)" fg:x="93949" fg:w="9079"/><text x="58.5645%" y="319.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (2,478 samples, 1.54%)</title><rect x="62.6472%" y="293" width="1.5439%" height="15" fill="rgb(222,165,49)" fg:x="100550" fg:w="2478"/><text x="62.6772%" y="303.50">jsonschema::schema_..</text></g><g><title>jsonschema::validator::Validate::apply (688 samples, 0.43%)</title><rect x="63.7624%" y="277" width="0.4287%" height="15" fill="rgb(219,113,52)" fg:x="102340" fg:w="688"/><text x="63.7924%" y="287.50">json..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (30,291 samples, 18.87%)</title><rect x="45.3191%" y="373" width="18.8727%" height="15" fill="rgb(214,7,15)" fg:x="72738" fg:w="30291"/><text x="45.3491%" y="383.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (30,269 samples, 18.86%)</title><rect x="45.3328%" y="357" width="18.8590%" height="15" fill="rgb(235,32,4)" fg:x="72760" fg:w="30269"/><text x="45.3628%" y="367.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (30,293 samples, 18.87%)</title><rect x="45.3191%" y="405" width="18.8739%" height="15" fill="rgb(238,90,54)" fg:x="72738" fg:w="30293"/><text x="45.3491%" y="415.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (30,293 samples, 18.87%)</title><rect x="45.3191%" y="389" width="18.8739%" height="15" fill="rgb(213,208,19)" fg:x="72738" fg:w="30293"/><text x="45.3491%" y="399.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="64.2503%" y="229" width="0.0168%" height="15" fill="rgb(233,156,4)" fg:x="103123" fg:w="27"/><text x="64.2803%" y="239.50"></text></g><g><title>mi_free (17 samples, 0.01%)</title><rect x="64.2565%" y="213" width="0.0106%" height="15" fill="rgb(207,194,5)" fg:x="103133" fg:w="17"/><text x="64.2865%" y="223.50"></text></g><g><title>core::str::converts::from_utf8 (82 samples, 0.05%)</title><rect x="64.2684%" y="229" width="0.0511%" height="15" fill="rgb(206,111,30)" fg:x="103152" fg:w="82"/><text x="64.2984%" y="239.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (30,552 samples, 19.04%)</title><rect x="45.3191%" y="437" width="19.0353%" height="15" fill="rgb(243,70,54)" fg:x="72738" fg:w="30552"/><text x="45.3491%" y="447.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (30,552 samples, 19.04%)</title><rect x="45.3191%" y="421" width="19.0353%" height="15" fill="rgb(242,28,8)" fg:x="72738" fg:w="30552"/><text x="45.3491%" y="431.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (259 samples, 0.16%)</title><rect x="64.1930%" y="405" width="0.1614%" height="15" fill="rgb(219,106,18)" fg:x="103031" fg:w="259"/><text x="64.2230%" y="415.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (259 samples, 0.16%)</title><rect x="64.1930%" y="389" width="0.1614%" height="15" fill="rgb(244,222,10)" fg:x="103031" fg:w="259"/><text x="64.2230%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (259 samples, 0.16%)</title><rect x="64.1930%" y="373" width="0.1614%" height="15" fill="rgb(236,179,52)" fg:x="103031" fg:w="259"/><text x="64.2230%" y="383.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (259 samples, 0.16%)</title><rect x="64.1930%" y="357" width="0.1614%" height="15" fill="rgb(213,23,39)" fg:x="103031" fg:w="259"/><text x="64.2230%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (259 samples, 0.16%)</title><rect x="64.1930%" y="341" width="0.1614%" height="15" fill="rgb(238,48,10)" fg:x="103031" fg:w="259"/><text x="64.2230%" y="351.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (259 samples, 0.16%)</title><rect x="64.1930%" y="325" width="0.1614%" height="15" fill="rgb(251,196,23)" fg:x="103031" fg:w="259"/><text x="64.2230%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (259 samples, 0.16%)</title><rect x="64.1930%" y="309" width="0.1614%" height="15" fill="rgb(250,152,24)" fg:x="103031" fg:w="259"/><text x="64.2230%" y="319.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (258 samples, 0.16%)</title><rect x="64.1936%" y="293" width="0.1607%" height="15" fill="rgb(209,150,17)" fg:x="103032" fg:w="258"/><text x="64.2236%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (258 samples, 0.16%)</title><rect x="64.1936%" y="277" width="0.1607%" height="15" fill="rgb(234,202,34)" fg:x="103032" fg:w="258"/><text x="64.2236%" y="287.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (256 samples, 0.16%)</title><rect x="64.1948%" y="261" width="0.1595%" height="15" fill="rgb(253,148,53)" fg:x="103034" fg:w="256"/><text x="64.2248%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (256 samples, 0.16%)</title><rect x="64.1948%" y="245" width="0.1595%" height="15" fill="rgb(218,129,16)" fg:x="103034" fg:w="256"/><text x="64.2248%" y="255.50"></text></g><g><title>mi_malloc (51 samples, 0.03%)</title><rect x="64.3226%" y="229" width="0.0318%" height="15" fill="rgb(216,85,19)" fg:x="103239" fg:w="51"/><text x="64.3526%" y="239.50"></text></g><g><title>mi_malloc (79 samples, 0.05%)</title><rect x="64.5008%" y="245" width="0.0492%" height="15" fill="rgb(235,228,7)" fg:x="103525" fg:w="79"/><text x="64.5308%" y="255.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (100 samples, 0.06%)</title><rect x="64.5500%" y="245" width="0.0623%" height="15" fill="rgb(245,175,0)" fg:x="103604" fg:w="100"/><text x="64.5800%" y="255.50"></text></g><g><title>mi_malloc (57 samples, 0.04%)</title><rect x="64.5768%" y="229" width="0.0355%" height="15" fill="rgb(208,168,36)" fg:x="103647" fg:w="57"/><text x="64.6068%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (410 samples, 0.26%)</title><rect x="64.3575%" y="261" width="0.2554%" height="15" fill="rgb(246,171,24)" fg:x="103295" fg:w="410"/><text x="64.3875%" y="271.50">c..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (455 samples, 0.28%)</title><rect x="64.3543%" y="373" width="0.2835%" height="15" fill="rgb(215,142,24)" fg:x="103290" fg:w="455"/><text x="64.3843%" y="383.50">ra..</text></g><g><title>rayon_core::join::join_context::{{closure}} (455 samples, 0.28%)</title><rect x="64.3543%" y="357" width="0.2835%" height="15" fill="rgb(250,187,7)" fg:x="103290" fg:w="455"/><text x="64.3843%" y="367.50">ra..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (455 samples, 0.28%)</title><rect x="64.3543%" y="341" width="0.2835%" height="15" fill="rgb(228,66,33)" fg:x="103290" fg:w="455"/><text x="64.3843%" y="351.50">ra..</text></g><g><title>rayon_core::join::join_context::{{closure}} (455 samples, 0.28%)</title><rect x="64.3543%" y="325" width="0.2835%" height="15" fill="rgb(234,215,21)" fg:x="103290" fg:w="455"/><text x="64.3843%" y="335.50">ra..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (455 samples, 0.28%)</title><rect x="64.3543%" y="309" width="0.2835%" height="15" fill="rgb(222,191,20)" fg:x="103290" fg:w="455"/><text x="64.3843%" y="319.50">ra..</text></g><g><title>rayon_core::join::join_context::{{closure}} (450 samples, 0.28%)</title><rect x="64.3575%" y="293" width="0.2804%" height="15" fill="rgb(245,79,54)" fg:x="103295" fg:w="450"/><text x="64.3875%" y="303.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (450 samples, 0.28%)</title><rect x="64.3575%" y="277" width="0.2804%" height="15" fill="rgb(240,10,37)" fg:x="103295" fg:w="450"/><text x="64.3875%" y="287.50">r..</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (40 samples, 0.02%)</title><rect x="64.6129%" y="261" width="0.0249%" height="15" fill="rgb(214,192,32)" fg:x="103705" fg:w="40"/><text x="64.6429%" y="271.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (31,011 samples, 19.32%)</title><rect x="45.3184%" y="453" width="19.3213%" height="15" fill="rgb(209,36,54)" fg:x="72737" fg:w="31011"/><text x="45.3484%" y="463.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (458 samples, 0.29%)</title><rect x="64.3543%" y="437" width="0.2854%" height="15" fill="rgb(220,10,11)" fg:x="103290" fg:w="458"/><text x="64.3843%" y="447.50">ra..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (458 samples, 0.29%)</title><rect x="64.3543%" y="421" width="0.2854%" height="15" fill="rgb(221,106,17)" fg:x="103290" fg:w="458"/><text x="64.3843%" y="431.50">&lt;r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (458 samples, 0.29%)</title><rect x="64.3543%" y="405" width="0.2854%" height="15" fill="rgb(251,142,44)" fg:x="103290" fg:w="458"/><text x="64.3843%" y="415.50">ra..</text></g><g><title>rayon_core::join::join_context::{{closure}} (458 samples, 0.29%)</title><rect x="64.3543%" y="389" width="0.2854%" height="15" fill="rgb(238,13,15)" fg:x="103290" fg:w="458"/><text x="64.3843%" y="399.50">ra..</text></g><g><title>[qsvlite] (36 samples, 0.02%)</title><rect x="71.1474%" y="165" width="0.0224%" height="15" fill="rgb(208,107,27)" fg:x="114193" fg:w="36"/><text x="71.1774%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (205 samples, 0.13%)</title><rect x="71.1736%" y="165" width="0.1277%" height="15" fill="rgb(205,136,37)" fg:x="114235" fg:w="205"/><text x="71.2036%" y="175.50"></text></g><g><title>_mi_heap_realloc_zero (2,314 samples, 1.44%)</title><rect x="70.0845%" y="181" width="1.4417%" height="15" fill="rgb(250,205,27)" fg:x="112487" fg:w="2314"/><text x="70.1145%" y="191.50">_mi_heap_realloc_z..</text></g><g><title>mi_free (358 samples, 0.22%)</title><rect x="71.3032%" y="165" width="0.2231%" height="15" fill="rgb(210,80,43)" fg:x="114443" fg:w="358"/><text x="71.3332%" y="175.50">m..</text></g><g><title>mi_heap_realloc (28 samples, 0.02%)</title><rect x="71.5293%" y="181" width="0.0174%" height="15" fill="rgb(247,160,36)" fg:x="114806" fg:w="28"/><text x="71.5593%" y="191.50"></text></g><g><title>mi_malloc (952 samples, 0.59%)</title><rect x="71.5468%" y="181" width="0.5931%" height="15" fill="rgb(234,13,49)" fg:x="114834" fg:w="952"/><text x="71.5768%" y="191.50">mi_mal..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (8,595 samples, 5.36%)</title><rect x="66.9381%" y="229" width="5.3551%" height="15" fill="rgb(234,122,0)" fg:x="107437" fg:w="8595"/><text x="66.9681%" y="239.50">&lt;alloc::string::String as core::fmt::Write&gt;::write_char</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5,298 samples, 3.30%)</title><rect x="68.9923%" y="213" width="3.3009%" height="15" fill="rgb(207,146,38)" fg:x="110734" fg:w="5298"/><text x="69.0223%" y="223.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_res..</text></g><g><title>alloc::raw_vec::finish_grow (3,903 samples, 2.43%)</title><rect x="69.8614%" y="197" width="2.4317%" height="15" fill="rgb(207,177,25)" fg:x="112129" fg:w="3903"/><text x="69.8914%" y="207.50">alloc::raw_vec::finish_grow</text></g><g><title>mi_realloc (246 samples, 0.15%)</title><rect x="72.1399%" y="181" width="0.1533%" height="15" fill="rgb(211,178,42)" fg:x="115786" fg:w="246"/><text x="72.1699%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (162 samples, 0.10%)</title><rect x="72.3574%" y="213" width="0.1009%" height="15" fill="rgb(230,69,54)" fg:x="116135" fg:w="162"/><text x="72.3874%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (62 samples, 0.04%)</title><rect x="73.0701%" y="165" width="0.0386%" height="15" fill="rgb(214,135,41)" fg:x="117279" fg:w="62"/><text x="73.1001%" y="175.50"></text></g><g><title>_mi_heap_realloc_zero (816 samples, 0.51%)</title><rect x="72.6857%" y="181" width="0.5084%" height="15" fill="rgb(237,67,25)" fg:x="116662" fg:w="816"/><text x="72.7157%" y="191.50">_mi_h..</text></g><g><title>mi_free (137 samples, 0.09%)</title><rect x="73.1087%" y="165" width="0.0854%" height="15" fill="rgb(222,189,50)" fg:x="117341" fg:w="137"/><text x="73.1387%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,489 samples, 0.93%)</title><rect x="72.2932%" y="229" width="0.9277%" height="15" fill="rgb(245,148,34)" fg:x="116032" fg:w="1489"/><text x="72.3232%" y="239.50">&lt;alloc::str..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,224 samples, 0.76%)</title><rect x="72.4583%" y="213" width="0.7626%" height="15" fill="rgb(222,29,6)" fg:x="116297" fg:w="1224"/><text x="72.4883%" y="223.50">alloc::r..</text></g><g><title>alloc::raw_vec::finish_grow (962 samples, 0.60%)</title><rect x="72.6215%" y="197" width="0.5994%" height="15" fill="rgb(221,189,43)" fg:x="116559" fg:w="962"/><text x="72.6515%" y="207.50">alloc:..</text></g><g><title>mi_realloc (31 samples, 0.02%)</title><rect x="73.2016%" y="181" width="0.0193%" height="15" fill="rgb(207,36,27)" fg:x="117490" fg:w="31"/><text x="73.2316%" y="191.50"></text></g><g><title>&lt;jsonschema::paths::JSONPointer as core::fmt::Display&gt;::fmt (13,784 samples, 8.59%)</title><rect x="64.6416%" y="245" width="8.5881%" height="15" fill="rgb(217,90,24)" fg:x="103751" fg:w="13784"/><text x="64.6716%" y="255.50">&lt;jsonschema::paths::JSONPointer as core::fmt::Display&gt;::fmt</text></g><g><title>serde::ser::SerializeMap::serialize_entry (13,787 samples, 8.59%)</title><rect x="64.6416%" y="261" width="8.5899%" height="15" fill="rgb(224,66,35)" fg:x="103751" fg:w="13787"/><text x="64.6716%" y="271.50">serde::ser::SerializeMap::serialize_entry</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,067 samples, 0.66%)</title><rect x="75.8969%" y="245" width="0.6648%" height="15" fill="rgb(221,13,50)" fg:x="121816" fg:w="1067"/><text x="75.9269%" y="255.50">&lt;std::c..</text></g><g><title>alloc::raw_vec::finish_grow (562 samples, 0.35%)</title><rect x="76.5673%" y="245" width="0.3502%" height="15" fill="rgb(236,68,49)" fg:x="122892" fg:w="562"/><text x="76.5973%" y="255.50">al..</text></g><g><title>mi_malloc (514 samples, 0.32%)</title><rect x="76.5972%" y="229" width="0.3202%" height="15" fill="rgb(229,146,28)" fg:x="122940" fg:w="514"/><text x="76.6272%" y="239.50">mi..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (5,917 samples, 3.69%)</title><rect x="73.2315%" y="261" width="3.6866%" height="15" fill="rgb(225,31,38)" fg:x="117538" fg:w="5917"/><text x="73.2615%" y="271.50">serde_json::map::Map&lt;alloc::string::String,serde_j..</text></g><g><title>__memmove_avx_unaligned_erms (69 samples, 0.04%)</title><rect x="77.2159%" y="245" width="0.0430%" height="15" fill="rgb(250,208,3)" fg:x="123933" fg:w="69"/><text x="77.2459%" y="255.50"></text></g><g><title>_mi_malloc_generic (72 samples, 0.04%)</title><rect x="77.2589%" y="245" width="0.0449%" height="15" fill="rgb(246,54,23)" fg:x="124002" fg:w="72"/><text x="77.2889%" y="255.50"></text></g><g><title>_mi_page_free_collect (17 samples, 0.01%)</title><rect x="77.2931%" y="229" width="0.0106%" height="15" fill="rgb(243,76,11)" fg:x="124057" fg:w="17"/><text x="77.3231%" y="239.50"></text></g><g><title>mi_malloc (115 samples, 0.07%)</title><rect x="77.3037%" y="245" width="0.0717%" height="15" fill="rgb(245,21,50)" fg:x="124074" fg:w="115"/><text x="77.3337%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20,440 samples, 12.74%)</title><rect x="64.6416%" y="277" width="12.7350%" height="15" fill="rgb(228,9,43)" fg:x="103751" fg:w="20440"/><text x="64.6716%" y="287.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (736 samples, 0.46%)</title><rect x="76.9180%" y="261" width="0.4586%" height="15" fill="rgb(208,100,47)" fg:x="123455" fg:w="736"/><text x="76.9480%" y="271.50">serd..</text></g><g><title>__memmove_avx_unaligned_erms (786 samples, 0.49%)</title><rect x="77.4707%" y="245" width="0.4897%" height="15" fill="rgb(232,26,8)" fg:x="124342" fg:w="786"/><text x="77.5007%" y="255.50">__me..</text></g><g><title>__memmove_avx_unaligned_erms (27 samples, 0.02%)</title><rect x="77.9722%" y="213" width="0.0168%" height="15" fill="rgb(216,166,38)" fg:x="125147" fg:w="27"/><text x="78.0022%" y="223.50"></text></g><g><title>_mi_malloc_generic (34 samples, 0.02%)</title><rect x="77.9891%" y="213" width="0.0212%" height="15" fill="rgb(251,202,51)" fg:x="125174" fg:w="34"/><text x="78.0191%" y="223.50"></text></g><g><title>_mi_heap_realloc_zero (83 samples, 0.05%)</title><rect x="77.9629%" y="229" width="0.0517%" height="15" fill="rgb(254,216,34)" fg:x="125132" fg:w="83"/><text x="77.9929%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (91 samples, 0.06%)</title><rect x="77.9604%" y="245" width="0.0567%" height="15" fill="rgb(251,32,27)" fg:x="125128" fg:w="91"/><text x="77.9904%" y="255.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1,068 samples, 0.67%)</title><rect x="77.3766%" y="261" width="0.6654%" height="15" fill="rgb(208,127,28)" fg:x="124191" fg:w="1068"/><text x="77.4066%" y="271.50">&lt;alloc:..</text></g><g><title>mi_free (29 samples, 0.02%)</title><rect x="78.0239%" y="245" width="0.0181%" height="15" fill="rgb(224,137,22)" fg:x="125230" fg:w="29"/><text x="78.0539%" y="255.50"></text></g><g><title>__memcmp_avx2_movbe (330 samples, 0.21%)</title><rect x="79.4931%" y="245" width="0.2056%" height="15" fill="rgb(254,70,32)" fg:x="127588" fg:w="330"/><text x="79.5231%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (97 samples, 0.06%)</title><rect x="79.6987%" y="245" width="0.0604%" height="15" fill="rgb(229,75,37)" fg:x="127918" fg:w="97"/><text x="79.7287%" y="255.50"></text></g><g><title>_mi_malloc_generic (36 samples, 0.02%)</title><rect x="79.7591%" y="245" width="0.0224%" height="15" fill="rgb(252,64,23)" fg:x="128015" fg:w="36"/><text x="79.7891%" y="255.50"></text></g><g><title>mi_free (187 samples, 0.12%)</title><rect x="79.7828%" y="245" width="0.1165%" height="15" fill="rgb(232,162,48)" fg:x="128053" fg:w="187"/><text x="79.8128%" y="255.50"></text></g><g><title>mi_malloc (298 samples, 0.19%)</title><rect x="79.8993%" y="245" width="0.1857%" height="15" fill="rgb(246,160,12)" fg:x="128240" fg:w="298"/><text x="79.9293%" y="255.50"></text></g><g><title>&lt;jsonschema::keywords::properties::PropertiesValidator as jsonschema::validator::Validate&gt;::apply (3,280 samples, 2.04%)</title><rect x="78.0420%" y="261" width="2.0436%" height="15" fill="rgb(247,166,0)" fg:x="125259" fg:w="3280"/><text x="78.0720%" y="271.50">&lt;jsonschema::keywords::pro..</text></g><g><title>&lt;jsonschema::keywords::required::RequiredValidator as jsonschema::validator::Validate&gt;::validate (1,257 samples, 0.78%)</title><rect x="80.0856%" y="245" width="0.7832%" height="15" fill="rgb(249,219,21)" fg:x="128539" fg:w="1257"/><text x="80.1156%" y="255.50">&lt;jsonsche..</text></g><g><title>__memcmp_avx2_movbe (332 samples, 0.21%)</title><rect x="80.6619%" y="229" width="0.2069%" height="15" fill="rgb(205,209,3)" fg:x="129464" fg:w="332"/><text x="80.6919%" y="239.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (26,075 samples, 16.25%)</title><rect x="64.6397%" y="421" width="16.2459%" height="15" fill="rgb(243,44,1)" fg:x="103748" fg:w="26075"/><text x="64.6697%" y="431.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (26,075 samples, 16.25%)</title><rect x="64.6397%" y="405" width="16.2459%" height="15" fill="rgb(206,159,16)" fg:x="103748" fg:w="26075"/><text x="64.6697%" y="415.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (26,075 samples, 16.25%)</title><rect x="64.6397%" y="389" width="16.2459%" height="15" fill="rgb(244,77,30)" fg:x="103748" fg:w="26075"/><text x="64.6697%" y="399.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (26,075 samples, 16.25%)</title><rect x="64.6397%" y="373" width="16.2459%" height="15" fill="rgb(218,69,12)" fg:x="103748" fg:w="26075"/><text x="64.6697%" y="383.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (26,075 samples, 16.25%)</title><rect x="64.6397%" y="357" width="16.2459%" height="15" fill="rgb(212,87,7)" fg:x="103748" fg:w="26075"/><text x="64.6697%" y="367.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (26,075 samples, 16.25%)</title><rect x="64.6397%" y="341" width="16.2459%" height="15" fill="rgb(245,114,25)" fg:x="103748" fg:w="26075"/><text x="64.6697%" y="351.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (26,075 samples, 16.25%)</title><rect x="64.6397%" y="325" width="16.2459%" height="15" fill="rgb(210,61,42)" fg:x="103748" fg:w="26075"/><text x="64.6697%" y="335.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (26,072 samples, 16.24%)</title><rect x="64.6416%" y="309" width="16.2440%" height="15" fill="rgb(211,52,33)" fg:x="103751" fg:w="26072"/><text x="64.6716%" y="319.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (26,072 samples, 16.24%)</title><rect x="64.6416%" y="293" width="16.2440%" height="15" fill="rgb(234,58,33)" fg:x="103751" fg:w="26072"/><text x="64.6716%" y="303.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (5,632 samples, 3.51%)</title><rect x="77.3766%" y="277" width="3.5090%" height="15" fill="rgb(220,115,36)" fg:x="124191" fg:w="5632"/><text x="77.4066%" y="287.50">jsonschema::schema_node::SchemaNode::apply_root..</text></g><g><title>jsonschema::validator::Validate::apply (1,284 samples, 0.80%)</title><rect x="80.0856%" y="261" width="0.8000%" height="15" fill="rgb(243,153,54)" fg:x="128539" fg:w="1284"/><text x="80.1156%" y="271.50">jsonschem..</text></g><g><title>_mi_malloc_generic (27 samples, 0.02%)</title><rect x="80.8688%" y="245" width="0.0168%" height="15" fill="rgb(251,47,18)" fg:x="129796" fg:w="27"/><text x="80.8988%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (54 samples, 0.03%)</title><rect x="80.9037%" y="213" width="0.0336%" height="15" fill="rgb(242,102,42)" fg:x="129852" fg:w="54"/><text x="80.9337%" y="223.50"></text></g><g><title>_mi_malloc_generic (33 samples, 0.02%)</title><rect x="80.9373%" y="213" width="0.0206%" height="15" fill="rgb(234,31,38)" fg:x="129906" fg:w="33"/><text x="80.9673%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (125 samples, 0.08%)</title><rect x="80.8937%" y="245" width="0.0779%" height="15" fill="rgb(221,117,51)" fg:x="129836" fg:w="125"/><text x="80.9237%" y="255.50"></text></g><g><title>_mi_heap_realloc_zero (125 samples, 0.08%)</title><rect x="80.8937%" y="229" width="0.0779%" height="15" fill="rgb(212,20,18)" fg:x="129836" fg:w="125"/><text x="80.9237%" y="239.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (26,472 samples, 16.49%)</title><rect x="64.6397%" y="453" width="16.4933%" height="15" fill="rgb(245,133,36)" fg:x="103748" fg:w="26472"/><text x="64.6697%" y="463.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (26,472 samples, 16.49%)</title><rect x="64.6397%" y="437" width="16.4933%" height="15" fill="rgb(212,6,19)" fg:x="103748" fg:w="26472"/><text x="64.6697%" y="447.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::join::join_context::{{closure}} (397 samples, 0.25%)</title><rect x="80.8856%" y="421" width="0.2473%" height="15" fill="rgb(218,1,36)" fg:x="129823" fg:w="397"/><text x="80.9156%" y="431.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (397 samples, 0.25%)</title><rect x="80.8856%" y="405" width="0.2473%" height="15" fill="rgb(246,84,54)" fg:x="129823" fg:w="397"/><text x="80.9156%" y="415.50">r..</text></g><g><title>rayon_core::join::join_context::{{closure}} (397 samples, 0.25%)</title><rect x="80.8856%" y="389" width="0.2473%" height="15" fill="rgb(242,110,6)" fg:x="129823" fg:w="397"/><text x="80.9156%" y="399.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (397 samples, 0.25%)</title><rect x="80.8856%" y="373" width="0.2473%" height="15" fill="rgb(214,47,5)" fg:x="129823" fg:w="397"/><text x="80.9156%" y="383.50">r..</text></g><g><title>rayon_core::join::join_context::{{closure}} (397 samples, 0.25%)</title><rect x="80.8856%" y="357" width="0.2473%" height="15" fill="rgb(218,159,25)" fg:x="129823" fg:w="397"/><text x="80.9156%" y="367.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (397 samples, 0.25%)</title><rect x="80.8856%" y="341" width="0.2473%" height="15" fill="rgb(215,211,28)" fg:x="129823" fg:w="397"/><text x="80.9156%" y="351.50">r..</text></g><g><title>rayon_core::join::join_context::{{closure}} (397 samples, 0.25%)</title><rect x="80.8856%" y="325" width="0.2473%" height="15" fill="rgb(238,59,32)" fg:x="129823" fg:w="397"/><text x="80.9156%" y="335.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (397 samples, 0.25%)</title><rect x="80.8856%" y="309" width="0.2473%" height="15" fill="rgb(226,82,3)" fg:x="129823" fg:w="397"/><text x="80.9156%" y="319.50">r..</text></g><g><title>rayon_core::join::join_context::{{closure}} (397 samples, 0.25%)</title><rect x="80.8856%" y="293" width="0.2473%" height="15" fill="rgb(240,164,32)" fg:x="129823" fg:w="397"/><text x="80.9156%" y="303.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (397 samples, 0.25%)</title><rect x="80.8856%" y="277" width="0.2473%" height="15" fill="rgb(232,46,7)" fg:x="129823" fg:w="397"/><text x="80.9156%" y="287.50">r..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (384 samples, 0.24%)</title><rect x="80.8937%" y="261" width="0.2392%" height="15" fill="rgb(229,129,53)" fg:x="129836" fg:w="384"/><text x="80.9237%" y="271.50">s..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (259 samples, 0.16%)</title><rect x="80.9716%" y="245" width="0.1614%" height="15" fill="rgb(234,188,29)" fg:x="129961" fg:w="259"/><text x="81.0016%" y="255.50"></text></g><g><title>mi_malloc (43 samples, 0.03%)</title><rect x="81.1062%" y="229" width="0.0268%" height="15" fill="rgb(246,141,4)" fg:x="130177" fg:w="43"/><text x="81.1362%" y="239.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (103 samples, 0.06%)</title><rect x="81.1329%" y="453" width="0.0642%" height="15" fill="rgb(229,23,39)" fg:x="130220" fg:w="103"/><text x="81.1629%" y="463.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (269 samples, 0.17%)</title><rect x="81.1971%" y="453" width="0.1676%" height="15" fill="rgb(206,12,3)" fg:x="130323" fg:w="269"/><text x="81.2271%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (200 samples, 0.12%)</title><rect x="81.3647%" y="453" width="0.1246%" height="15" fill="rgb(252,226,20)" fg:x="130592" fg:w="200"/><text x="81.3947%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (50 samples, 0.03%)</title><rect x="81.6245%" y="149" width="0.0312%" height="15" fill="rgb(216,123,35)" fg:x="131009" fg:w="50"/><text x="81.6545%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (590 samples, 0.37%)</title><rect x="81.4931%" y="165" width="0.3676%" height="15" fill="rgb(212,68,40)" fg:x="130798" fg:w="590"/><text x="81.5231%" y="175.50">cor..</text></g><g><title>mi_free (329 samples, 0.20%)</title><rect x="81.6557%" y="149" width="0.2050%" height="15" fill="rgb(254,125,32)" fg:x="131059" fg:w="329"/><text x="81.6857%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (103 samples, 0.06%)</title><rect x="82.0164%" y="149" width="0.0642%" height="15" fill="rgb(253,97,22)" fg:x="131638" fg:w="103"/><text x="82.0464%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (1,374 samples, 0.86%)</title><rect x="81.4900%" y="213" width="0.8561%" height="15" fill="rgb(241,101,14)" fg:x="130793" fg:w="1374"/><text x="81.5200%" y="223.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,374 samples, 0.86%)</title><rect x="81.4900%" y="197" width="0.8561%" height="15" fill="rgb(238,103,29)" fg:x="130793" fg:w="1374"/><text x="81.5200%" y="207.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (1,374 samples, 0.86%)</title><rect x="81.4900%" y="181" width="0.8561%" height="15" fill="rgb(233,195,47)" fg:x="130793" fg:w="1374"/><text x="81.5200%" y="191.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (779 samples, 0.49%)</title><rect x="81.8607%" y="165" width="0.4854%" height="15" fill="rgb(246,218,30)" fg:x="131388" fg:w="779"/><text x="81.8907%" y="175.50">core..</text></g><g><title>mi_free (426 samples, 0.27%)</title><rect x="82.0806%" y="149" width="0.2654%" height="15" fill="rgb(219,145,47)" fg:x="131741" fg:w="426"/><text x="82.1106%" y="159.50">m..</text></g><g><title>core::ptr::drop_in_place&lt;jsonschema::output::BasicOutput&gt; (88 samples, 0.05%)</title><rect x="82.3460%" y="213" width="0.0548%" height="15" fill="rgb(243,12,26)" fg:x="132167" fg:w="88"/><text x="82.3760%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::Annotations&gt;&gt; (88 samples, 0.05%)</title><rect x="82.3460%" y="197" width="0.0548%" height="15" fill="rgb(214,87,16)" fg:x="132167" fg:w="88"/><text x="82.3760%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (88 samples, 0.05%)</title><rect x="82.3460%" y="181" width="0.0548%" height="15" fill="rgb(208,99,42)" fg:x="132167" fg:w="88"/><text x="82.3760%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (88 samples, 0.05%)</title><rect x="82.3460%" y="165" width="0.0548%" height="15" fill="rgb(253,99,2)" fg:x="132167" fg:w="88"/><text x="82.3760%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,168 samples, 0.73%)</title><rect x="84.3024%" y="197" width="0.7277%" height="15" fill="rgb(220,168,23)" fg:x="135307" fg:w="1168"/><text x="84.3324%" y="207.50">&lt;std::co..</text></g><g><title>start_thread (6,287 samples, 3.92%)</title><rect x="81.4893%" y="453" width="3.9171%" height="15" fill="rgb(242,38,24)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="463.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6,287 samples, 3.92%)</title><rect x="81.4893%" y="437" width="3.9171%" height="15" fill="rgb(225,182,9)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="447.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (6,287 samples, 3.92%)</title><rect x="81.4893%" y="421" width="3.9171%" height="15" fill="rgb(243,178,37)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="431.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,287 samples, 3.92%)</title><rect x="81.4893%" y="405" width="3.9171%" height="15" fill="rgb(232,139,19)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtr..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (6,287 samples, 3.92%)</title><rect x="81.4893%" y="389" width="3.9171%" height="15" fill="rgb(225,201,24)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="399.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (6,287 samples, 3.92%)</title><rect x="81.4893%" y="373" width="3.9171%" height="15" fill="rgb(221,47,46)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="383.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,287 samples, 3.92%)</title><rect x="81.4893%" y="357" width="3.9171%" height="15" fill="rgb(249,23,13)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="367.50">rayon::iter::plumbing::bridge_producer_consumer::help..</text></g><g><title>rayon_core::join::join_context::{{closure}} (6,287 samples, 3.92%)</title><rect x="81.4893%" y="341" width="3.9171%" height="15" fill="rgb(219,9,5)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="351.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,287 samples, 3.92%)</title><rect x="81.4893%" y="325" width="3.9171%" height="15" fill="rgb(254,171,16)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="335.50">rayon::iter::plumbing::bridge_producer_consumer::help..</text></g><g><title>rayon_core::join::join_context::{{closure}} (6,287 samples, 3.92%)</title><rect x="81.4893%" y="309" width="3.9171%" height="15" fill="rgb(230,171,20)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="319.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,287 samples, 3.92%)</title><rect x="81.4893%" y="293" width="3.9171%" height="15" fill="rgb(210,71,41)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="303.50">rayon::iter::plumbing::bridge_producer_consumer::help..</text></g><g><title>rayon_core::join::join_context::{{closure}} (6,287 samples, 3.92%)</title><rect x="81.4893%" y="277" width="3.9171%" height="15" fill="rgb(206,173,20)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="287.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,287 samples, 3.92%)</title><rect x="81.4893%" y="261" width="3.9171%" height="15" fill="rgb(233,88,34)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="271.50">rayon::iter::plumbing::bridge_producer_consumer::help..</text></g><g><title>rayon_core::join::join_context::{{closure}} (6,287 samples, 3.92%)</title><rect x="81.4893%" y="245" width="3.9171%" height="15" fill="rgb(223,209,46)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="255.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,287 samples, 3.92%)</title><rect x="81.4893%" y="229" width="3.9171%" height="15" fill="rgb(250,43,18)" fg:x="130792" fg:w="6287"/><text x="81.5193%" y="239.50">rayon::iter::plumbing::bridge_producer_consumer::help..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (4,824 samples, 3.01%)</title><rect x="82.4008%" y="213" width="3.0056%" height="15" fill="rgb(208,13,10)" fg:x="132255" fg:w="4824"/><text x="82.4308%" y="223.50">indexmap::map::IndexMap&lt;K,V,S&gt;::get_inde..</text></g><g><title>__memcmp_avx2_movbe (595 samples, 0.37%)</title><rect x="85.0357%" y="197" width="0.3707%" height="15" fill="rgb(212,200,36)" fg:x="136484" fg:w="595"/><text x="85.0657%" y="207.50">__m..</text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (20 samples, 0.01%)</title><rect x="85.4095%" y="261" width="0.0125%" height="15" fill="rgb(225,90,30)" fg:x="137084" fg:w="20"/><text x="85.4395%" y="271.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 0.01%)</title><rect x="85.4095%" y="245" width="0.0125%" height="15" fill="rgb(236,182,39)" fg:x="137084" fg:w="20"/><text x="85.4395%" y="255.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 0.01%)</title><rect x="85.4095%" y="229" width="0.0125%" height="15" fill="rgb(212,144,35)" fg:x="137084" fg:w="20"/><text x="85.4395%" y="239.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 0.01%)</title><rect x="85.4095%" y="213" width="0.0125%" height="15" fill="rgb(228,63,44)" fg:x="137084" fg:w="20"/><text x="85.4395%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (20 samples, 0.01%)</title><rect x="85.4095%" y="197" width="0.0125%" height="15" fill="rgb(228,109,6)" fg:x="137084" fg:w="20"/><text x="85.4395%" y="207.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (20 samples, 0.01%)</title><rect x="85.4095%" y="181" width="0.0125%" height="15" fill="rgb(238,117,24)" fg:x="137084" fg:w="20"/><text x="85.4395%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (20 samples, 0.01%)</title><rect x="85.4095%" y="165" width="0.0125%" height="15" fill="rgb(242,26,26)" fg:x="137084" fg:w="20"/><text x="85.4395%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (67 samples, 0.04%)</title><rect x="87.3260%" y="245" width="0.0417%" height="15" fill="rgb(221,92,48)" fg:x="140160" fg:w="67"/><text x="87.3560%" y="255.50"></text></g><g><title>mi_malloc (782 samples, 0.49%)</title><rect x="87.3740%" y="245" width="0.4872%" height="15" fill="rgb(209,209,32)" fg:x="140237" fg:w="782"/><text x="87.4040%" y="255.50">mi_m..</text></g><g><title>__memmove_avx_unaligned_erms (93 samples, 0.06%)</title><rect x="88.2070%" y="229" width="0.0579%" height="15" fill="rgb(221,70,22)" fg:x="141574" fg:w="93"/><text x="88.2370%" y="239.50"></text></g><g><title>mi_malloc (701 samples, 0.44%)</title><rect x="88.2681%" y="229" width="0.4368%" height="15" fill="rgb(248,145,5)" fg:x="141672" fg:w="701"/><text x="88.2981%" y="239.50">mi_m..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (1,357 samples, 0.85%)</title><rect x="87.8612%" y="245" width="0.8455%" height="15" fill="rgb(226,116,26)" fg:x="141019" fg:w="1357"/><text x="87.8912%" y="255.50">serde::se..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (5,274 samples, 3.29%)</title><rect x="85.4220%" y="261" width="3.2859%" height="15" fill="rgb(244,5,17)" fg:x="137104" fg:w="5274"/><text x="85.4520%" y="271.50">core::iter::traits::iterator::Iterator::try_..</text></g><g><title>core::str::&lt;impl str&gt;::parse (95 samples, 0.06%)</title><rect x="88.7079%" y="261" width="0.0592%" height="15" fill="rgb(252,159,33)" fg:x="142378" fg:w="95"/><text x="88.7379%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (56 samples, 0.03%)</title><rect x="88.7322%" y="245" width="0.0349%" height="15" fill="rgb(206,71,0)" fg:x="142417" fg:w="56"/><text x="88.7622%" y="255.50"></text></g><g><title>&lt;jsonschema::paths::JSONPointer as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="88.8562%" y="245" width="0.0174%" height="15" fill="rgb(233,118,54)" fg:x="142616" fg:w="28"/><text x="88.8862%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (47 samples, 0.03%)</title><rect x="88.8737%" y="245" width="0.0293%" height="15" fill="rgb(234,83,48)" fg:x="142644" fg:w="47"/><text x="88.9037%" y="255.50"></text></g><g><title>_mi_malloc_generic (57 samples, 0.04%)</title><rect x="88.9029%" y="245" width="0.0355%" height="15" fill="rgb(228,3,54)" fg:x="142691" fg:w="57"/><text x="88.9329%" y="255.50"></text></g><g><title>_mi_page_retire (23 samples, 0.01%)</title><rect x="88.9385%" y="245" width="0.0143%" height="15" fill="rgb(226,155,13)" fg:x="142748" fg:w="23"/><text x="88.9685%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (84 samples, 0.05%)</title><rect x="88.9528%" y="245" width="0.0523%" height="15" fill="rgb(241,28,37)" fg:x="142771" fg:w="84"/><text x="88.9828%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (67 samples, 0.04%)</title><rect x="88.9634%" y="229" width="0.0417%" height="15" fill="rgb(233,93,10)" fg:x="142788" fg:w="67"/><text x="88.9934%" y="239.50"></text></g><g><title>mi_malloc (52 samples, 0.03%)</title><rect x="88.9727%" y="213" width="0.0324%" height="15" fill="rgb(225,113,19)" fg:x="142803" fg:w="52"/><text x="89.0027%" y="223.50"></text></g><g><title>jsonschema::paths::InstancePath::to_vec (24 samples, 0.01%)</title><rect x="89.0095%" y="245" width="0.0150%" height="15" fill="rgb(241,2,18)" fg:x="142862" fg:w="24"/><text x="89.0395%" y="255.50"></text></g><g><title>mi_malloc (24 samples, 0.01%)</title><rect x="89.0095%" y="229" width="0.0150%" height="15" fill="rgb(228,207,21)" fg:x="142862" fg:w="24"/><text x="89.0395%" y="239.50"></text></g><g><title>_mi_malloc_generic (34 samples, 0.02%)</title><rect x="89.0282%" y="229" width="0.0212%" height="15" fill="rgb(213,211,35)" fg:x="142892" fg:w="34"/><text x="89.0582%" y="239.50"></text></g><g><title>jsonschema::validator::Validate::apply (46 samples, 0.03%)</title><rect x="89.0244%" y="245" width="0.0287%" height="15" fill="rgb(209,83,10)" fg:x="142886" fg:w="46"/><text x="89.0544%" y="255.50"></text></g><g><title>mi_free (39 samples, 0.02%)</title><rect x="89.0531%" y="245" width="0.0243%" height="15" fill="rgb(209,164,1)" fg:x="142932" fg:w="39"/><text x="89.0831%" y="255.50"></text></g><g><title>jsonschema::schema_node::SchemaNode::apply_rooted (549 samples, 0.34%)</title><rect x="88.7671%" y="261" width="0.3421%" height="15" fill="rgb(213,184,43)" fg:x="142473" fg:w="549"/><text x="88.7971%" y="271.50">js..</text></g><g><title>mi_malloc (51 samples, 0.03%)</title><rect x="89.0774%" y="245" width="0.0318%" height="15" fill="rgb(231,61,34)" fg:x="142971" fg:w="51"/><text x="89.1074%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (166 samples, 0.10%)</title><rect x="89.1503%" y="213" width="0.1034%" height="15" fill="rgb(235,75,3)" fg:x="143088" fg:w="166"/><text x="89.1803%" y="223.50"></text></g><g><title>_mi_page_free_collect (26 samples, 0.02%)</title><rect x="89.3185%" y="197" width="0.0162%" height="15" fill="rgb(220,106,47)" fg:x="143358" fg:w="26"/><text x="89.3485%" y="207.50"></text></g><g><title>_mi_malloc_generic (131 samples, 0.08%)</title><rect x="89.2537%" y="213" width="0.0816%" height="15" fill="rgb(210,196,33)" fg:x="143254" fg:w="131"/><text x="89.2837%" y="223.50"></text></g><g><title>_mi_page_retire (48 samples, 0.03%)</title><rect x="89.3360%" y="213" width="0.0299%" height="15" fill="rgb(229,154,42)" fg:x="143386" fg:w="48"/><text x="89.3660%" y="223.50"></text></g><g><title>_mi_heap_realloc_zero (421 samples, 0.26%)</title><rect x="89.1173%" y="229" width="0.2623%" height="15" fill="rgb(228,114,26)" fg:x="143035" fg:w="421"/><text x="89.1473%" y="239.50">_..</text></g><g><title>mi_free (22 samples, 0.01%)</title><rect x="89.3659%" y="213" width="0.0137%" height="15" fill="rgb(208,144,1)" fg:x="143434" fg:w="22"/><text x="89.3959%" y="223.50"></text></g><g><title>mi_malloc (35 samples, 0.02%)</title><rect x="89.3814%" y="229" width="0.0218%" height="15" fill="rgb(239,112,37)" fg:x="143459" fg:w="35"/><text x="89.4114%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (477 samples, 0.30%)</title><rect x="89.1092%" y="245" width="0.2972%" height="15" fill="rgb(210,96,50)" fg:x="143022" fg:w="477"/><text x="89.1392%" y="255.50">al..</text></g><g><title>__memset_avx2_unaligned_erms (33 samples, 0.02%)</title><rect x="89.7546%" y="229" width="0.0206%" height="15" fill="rgb(222,178,2)" fg:x="144058" fg:w="33"/><text x="89.7846%" y="239.50"></text></g><g><title>_mi_page_retire (37 samples, 0.02%)</title><rect x="89.7808%" y="229" width="0.0231%" height="15" fill="rgb(226,74,18)" fg:x="144100" fg:w="37"/><text x="89.8108%" y="239.50"></text></g><g><title>mi_free (23 samples, 0.01%)</title><rect x="89.8039%" y="229" width="0.0143%" height="15" fill="rgb(225,67,54)" fg:x="144137" fg:w="23"/><text x="89.8339%" y="239.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (7,238 samples, 4.51%)</title><rect x="85.4095%" y="373" width="4.5096%" height="15" fill="rgb(251,92,32)" fg:x="137084" fg:w="7238"/><text x="85.4395%" y="383.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (7,238 samples, 4.51%)</title><rect x="85.4095%" y="357" width="4.5096%" height="15" fill="rgb(228,149,22)" fg:x="137084" fg:w="7238"/><text x="85.4395%" y="367.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (7,238 samples, 4.51%)</title><rect x="85.4095%" y="341" width="4.5096%" height="15" fill="rgb(243,54,13)" fg:x="137084" fg:w="7238"/><text x="85.4395%" y="351.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (7,238 samples, 4.51%)</title><rect x="85.4095%" y="325" width="4.5096%" height="15" fill="rgb(243,180,28)" fg:x="137084" fg:w="7238"/><text x="85.4395%" y="335.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (7,238 samples, 4.51%)</title><rect x="85.4095%" y="309" width="4.5096%" height="15" fill="rgb(208,167,24)" fg:x="137084" fg:w="7238"/><text x="85.4395%" y="319.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (7,238 samples, 4.51%)</title><rect x="85.4095%" y="293" width="4.5096%" height="15" fill="rgb(245,73,45)" fg:x="137084" fg:w="7238"/><text x="85.4395%" y="303.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (7,238 samples, 4.51%)</title><rect x="85.4095%" y="277" width="4.5096%" height="15" fill="rgb(237,203,48)" fg:x="137084" fg:w="7238"/><text x="85.4395%" y="287.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (1,300 samples, 0.81%)</title><rect x="89.1092%" y="261" width="0.8100%" height="15" fill="rgb(211,197,16)" fg:x="143022" fg:w="1300"/><text x="89.1392%" y="271.50">serde_jso..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (823 samples, 0.51%)</title><rect x="89.4064%" y="245" width="0.5128%" height="15" fill="rgb(243,99,51)" fg:x="143499" fg:w="823"/><text x="89.4364%" y="255.50">hashb..</text></g><g><title>mi_malloc (162 samples, 0.10%)</title><rect x="89.8182%" y="229" width="0.1009%" height="15" fill="rgb(215,123,29)" fg:x="144160" fg:w="162"/><text x="89.8482%" y="239.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (7,239 samples, 4.51%)</title><rect x="85.4095%" y="405" width="4.5102%" height="15" fill="rgb(239,186,37)" fg:x="137084" fg:w="7239"/><text x="85.4395%" y="415.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (7,239 samples, 4.51%)</title><rect x="85.4095%" y="389" width="4.5102%" height="15" fill="rgb(252,136,39)" fg:x="137084" fg:w="7239"/><text x="85.4395%" y="399.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>__memmove_avx_unaligned_erms (46 samples, 0.03%)</title><rect x="90.2425%" y="245" width="0.0287%" height="15" fill="rgb(223,213,32)" fg:x="144841" fg:w="46"/><text x="90.2725%" y="255.50"></text></g><g><title>_mi_malloc_generic (26 samples, 0.02%)</title><rect x="90.2711%" y="245" width="0.0162%" height="15" fill="rgb(233,115,5)" fg:x="144887" fg:w="26"/><text x="90.3011%" y="255.50"></text></g><g><title>_mi_page_retire (18 samples, 0.01%)</title><rect x="90.3210%" y="229" width="0.0112%" height="15" fill="rgb(207,226,44)" fg:x="144967" fg:w="18"/><text x="90.3510%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (176 samples, 0.11%)</title><rect x="90.4755%" y="197" width="0.1097%" height="15" fill="rgb(208,126,0)" fg:x="145215" fg:w="176"/><text x="90.5055%" y="207.50"></text></g><g><title>mi_free (85 samples, 0.05%)</title><rect x="90.5322%" y="181" width="0.0530%" height="15" fill="rgb(244,66,21)" fg:x="145306" fg:w="85"/><text x="90.5622%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (33 samples, 0.02%)</title><rect x="90.6381%" y="181" width="0.0206%" height="15" fill="rgb(222,97,12)" fg:x="145476" fg:w="33"/><text x="90.6681%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (271 samples, 0.17%)</title><rect x="90.5852%" y="197" width="0.1688%" height="15" fill="rgb(219,213,19)" fg:x="145391" fg:w="271"/><text x="90.6152%" y="207.50"></text></g><g><title>mi_free (153 samples, 0.10%)</title><rect x="90.6587%" y="181" width="0.0953%" height="15" fill="rgb(252,169,30)" fg:x="145509" fg:w="153"/><text x="90.6887%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (969 samples, 0.60%)</title><rect x="90.3584%" y="213" width="0.6037%" height="15" fill="rgb(206,32,51)" fg:x="145027" fg:w="969"/><text x="90.3884%" y="223.50">core::..</text></g><g><title>mi_free (334 samples, 0.21%)</title><rect x="90.7540%" y="197" width="0.2081%" height="15" fill="rgb(250,172,42)" fg:x="145662" fg:w="334"/><text x="90.7840%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (106 samples, 0.07%)</title><rect x="90.9621%" y="213" width="0.0660%" height="15" fill="rgb(209,34,43)" fg:x="145996" fg:w="106"/><text x="90.9921%" y="223.50"></text></g><g><title>mi_free (79 samples, 0.05%)</title><rect x="90.9789%" y="197" width="0.0492%" height="15" fill="rgb(223,11,35)" fg:x="146023" fg:w="79"/><text x="91.0089%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,186 samples, 0.74%)</title><rect x="90.3322%" y="229" width="0.7389%" height="15" fill="rgb(251,219,26)" fg:x="144985" fg:w="1186"/><text x="90.3622%" y="239.50">core::pt..</text></g><g><title>mi_free (69 samples, 0.04%)</title><rect x="91.0281%" y="213" width="0.0430%" height="15" fill="rgb(231,119,3)" fg:x="146102" fg:w="69"/><text x="91.0581%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (1,382 samples, 0.86%)</title><rect x="90.2967%" y="245" width="0.8610%" height="15" fill="rgb(216,97,11)" fg:x="144928" fg:w="1382"/><text x="90.3267%" y="255.50">core::ptr:..</text></g><g><title>mi_free (139 samples, 0.09%)</title><rect x="91.0711%" y="229" width="0.0866%" height="15" fill="rgb(223,59,9)" fg:x="146171" fg:w="139"/><text x="91.1011%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (38 samples, 0.02%)</title><rect x="91.3010%" y="197" width="0.0237%" height="15" fill="rgb(233,93,31)" fg:x="146540" fg:w="38"/><text x="91.3310%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (110 samples, 0.07%)</title><rect x="91.2973%" y="213" width="0.0685%" height="15" fill="rgb(239,81,33)" fg:x="146534" fg:w="110"/><text x="91.3273%" y="223.50"></text></g><g><title>mi_free (66 samples, 0.04%)</title><rect x="91.3247%" y="197" width="0.0411%" height="15" fill="rgb(213,120,34)" fg:x="146578" fg:w="66"/><text x="91.3547%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonschema::output::BasicOutput&gt; (564 samples, 0.35%)</title><rect x="91.1577%" y="245" width="0.3514%" height="15" fill="rgb(243,49,53)" fg:x="146310" fg:w="564"/><text x="91.1877%" y="255.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::Annotations&gt;&gt; (541 samples, 0.34%)</title><rect x="91.1721%" y="229" width="0.3371%" height="15" fill="rgb(247,216,33)" fg:x="146333" fg:w="541"/><text x="91.2021%" y="239.50">co..</text></g><g><title>mi_free (230 samples, 0.14%)</title><rect x="91.3658%" y="213" width="0.1433%" height="15" fill="rgb(226,26,14)" fg:x="146644" fg:w="230"/><text x="91.3958%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (74 samples, 0.05%)</title><rect x="91.5129%" y="245" width="0.0461%" height="15" fill="rgb(215,49,53)" fg:x="146880" fg:w="74"/><text x="91.5429%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (559 samples, 0.35%)</title><rect x="91.5590%" y="245" width="0.3483%" height="15" fill="rgb(245,162,40)" fg:x="146954" fg:w="559"/><text x="91.5890%" y="255.50">co..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (351 samples, 0.22%)</title><rect x="92.5322%" y="229" width="0.2187%" height="15" fill="rgb(229,68,17)" fg:x="148516" fg:w="351"/><text x="92.5622%" y="239.50">&lt;..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (1,531 samples, 0.95%)</title><rect x="91.9073%" y="245" width="0.9539%" height="15" fill="rgb(213,182,10)" fg:x="147513" fg:w="1531"/><text x="91.9373%" y="255.50">indexmap::m..</text></g><g><title>__memcmp_avx2_movbe (174 samples, 0.11%)</title><rect x="92.7527%" y="229" width="0.1084%" height="15" fill="rgb(245,125,30)" fg:x="148870" fg:w="174"/><text x="92.7827%" y="239.50"></text></g><g><title>mi_free (18 samples, 0.01%)</title><rect x="92.8611%" y="245" width="0.0112%" height="15" fill="rgb(232,202,2)" fg:x="149044" fg:w="18"/><text x="92.8911%" y="255.50"></text></g><g><title>mi_malloc (311 samples, 0.19%)</title><rect x="92.8724%" y="245" width="0.1938%" height="15" fill="rgb(237,140,51)" fg:x="149062" fg:w="311"/><text x="92.9024%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (280 samples, 0.17%)</title><rect x="93.5191%" y="229" width="0.1745%" height="15" fill="rgb(236,157,25)" fg:x="150100" fg:w="280"/><text x="93.5491%" y="239.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,085 samples, 3.79%)</title><rect x="89.9198%" y="357" width="3.7912%" height="15" fill="rgb(219,209,0)" fg:x="144323" fg:w="6085"/><text x="89.9498%" y="367.50">rayon::iter::plumbing::bridge_producer_consumer::he..</text></g><g><title>rayon_core::join::join_context::{{closure}} (6,085 samples, 3.79%)</title><rect x="89.9198%" y="341" width="3.7912%" height="15" fill="rgb(240,116,54)" fg:x="144323" fg:w="6085"/><text x="89.9498%" y="351.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,085 samples, 3.79%)</title><rect x="89.9198%" y="325" width="3.7912%" height="15" fill="rgb(216,10,36)" fg:x="144323" fg:w="6085"/><text x="89.9498%" y="335.50">rayon::iter::plumbing::bridge_producer_consumer::he..</text></g><g><title>rayon_core::join::join_context::{{closure}} (6,085 samples, 3.79%)</title><rect x="89.9198%" y="309" width="3.7912%" height="15" fill="rgb(222,72,44)" fg:x="144323" fg:w="6085"/><text x="89.9498%" y="319.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,085 samples, 3.79%)</title><rect x="89.9198%" y="293" width="3.7912%" height="15" fill="rgb(232,159,9)" fg:x="144323" fg:w="6085"/><text x="89.9498%" y="303.50">rayon::iter::plumbing::bridge_producer_consumer::he..</text></g><g><title>rayon_core::join::join_context::{{closure}} (6,085 samples, 3.79%)</title><rect x="89.9198%" y="277" width="3.7912%" height="15" fill="rgb(210,39,32)" fg:x="144323" fg:w="6085"/><text x="89.9498%" y="287.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,085 samples, 3.79%)</title><rect x="89.9198%" y="261" width="3.7912%" height="15" fill="rgb(216,194,45)" fg:x="144323" fg:w="6085"/><text x="89.9498%" y="271.50">rayon::iter::plumbing::bridge_producer_consumer::he..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (1,035 samples, 0.64%)</title><rect x="93.0661%" y="245" width="0.6449%" height="15" fill="rgb(218,18,35)" fg:x="149373" fg:w="1035"/><text x="93.0961%" y="255.50">serde_j..</text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.02%)</title><rect x="93.6948%" y="229" width="0.0162%" height="15" fill="rgb(207,83,51)" fg:x="150382" fg:w="26"/><text x="93.7248%" y="239.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,086 samples, 3.79%)</title><rect x="89.9198%" y="389" width="3.7919%" height="15" fill="rgb(225,63,43)" fg:x="144323" fg:w="6086"/><text x="89.9498%" y="399.50">rayon::iter::plumbing::bridge_producer_consumer::he..</text></g><g><title>rayon_core::join::join_context::{{closure}} (6,086 samples, 3.79%)</title><rect x="89.9198%" y="373" width="3.7919%" height="15" fill="rgb(207,57,36)" fg:x="144323" fg:w="6086"/><text x="89.9498%" y="383.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>[unknown] (137,830 samples, 85.87%)</title><rect x="7.8385%" y="469" width="85.8743%" height="15" fill="rgb(216,99,33)" fg:x="12581" fg:w="137830"/><text x="7.8685%" y="479.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,327 samples, 8.30%)</title><rect x="85.4095%" y="453" width="8.3033%" height="15" fill="rgb(225,42,16)" fg:x="137084" fg:w="13327"/><text x="85.4395%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (13,327 samples, 8.30%)</title><rect x="85.4095%" y="437" width="8.3033%" height="15" fill="rgb(220,201,45)" fg:x="137084" fg:w="13327"/><text x="85.4395%" y="447.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (13,327 samples, 8.30%)</title><rect x="85.4095%" y="421" width="8.3033%" height="15" fill="rgb(225,33,4)" fg:x="137084" fg:w="13327"/><text x="85.4395%" y="431.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::join::join_context::{{closure}} (6,088 samples, 3.79%)</title><rect x="89.9198%" y="405" width="3.7931%" height="15" fill="rgb(224,33,50)" fg:x="144323" fg:w="6088"/><text x="89.9498%" y="415.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="93.7129%" y="453" width="0.0106%" height="15" fill="rgb(246,198,51)" fg:x="150411" fg:w="17"/><text x="93.7429%" y="463.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="93.7129%" y="437" width="0.0106%" height="15" fill="rgb(205,22,4)" fg:x="150411" fg:w="17"/><text x="93.7429%" y="447.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="93.7129%" y="421" width="0.0106%" height="15" fill="rgb(206,3,8)" fg:x="150411" fg:w="17"/><text x="93.7429%" y="431.50"></text></g><g><title>__memmove_avx_unaligned_erms (119 samples, 0.07%)</title><rect x="94.7515%" y="213" width="0.0741%" height="15" fill="rgb(251,23,15)" fg:x="152078" fg:w="119"/><text x="94.7815%" y="223.50"></text></g><g><title>_mi_malloc_generic (67 samples, 0.04%)</title><rect x="94.8256%" y="213" width="0.0417%" height="15" fill="rgb(252,88,28)" fg:x="152197" fg:w="67"/><text x="94.8556%" y="223.50"></text></g><g><title>_mi_page_retire (46 samples, 0.03%)</title><rect x="94.8674%" y="213" width="0.0287%" height="15" fill="rgb(212,127,14)" fg:x="152264" fg:w="46"/><text x="94.8974%" y="223.50"></text></g><g><title>_mi_page_retire (69 samples, 0.04%)</title><rect x="94.9621%" y="197" width="0.0430%" height="15" fill="rgb(247,145,37)" fg:x="152416" fg:w="69"/><text x="94.9921%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="95.3932%" y="165" width="0.0106%" height="15" fill="rgb(209,117,53)" fg:x="153108" fg:w="17"/><text x="95.4232%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (1,685 samples, 1.05%)</title><rect x="95.0624%" y="181" width="1.0498%" height="15" fill="rgb(212,90,42)" fg:x="152577" fg:w="1685"/><text x="95.0924%" y="191.50">core::ptr::d..</text></g><g><title>mi_free (1,131 samples, 0.70%)</title><rect x="95.4075%" y="165" width="0.7047%" height="15" fill="rgb(218,164,37)" fg:x="153131" fg:w="1131"/><text x="95.4375%" y="175.50">mi_free</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (351 samples, 0.22%)</title><rect x="96.1122%" y="181" width="0.2187%" height="15" fill="rgb(246,65,34)" fg:x="154262" fg:w="351"/><text x="96.1422%" y="191.50">c..</text></g><g><title>mi_free (245 samples, 0.15%)</title><rect x="96.1782%" y="165" width="0.1526%" height="15" fill="rgb(231,100,33)" fg:x="154368" fg:w="245"/><text x="96.2082%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,291 samples, 1.43%)</title><rect x="95.0050%" y="197" width="1.4274%" height="15" fill="rgb(228,126,14)" fg:x="152485" fg:w="2291"/><text x="95.0350%" y="207.50">core::ptr::drop_in..</text></g><g><title>mi_free (163 samples, 0.10%)</title><rect x="96.3309%" y="181" width="0.1016%" height="15" fill="rgb(215,173,21)" fg:x="154613" fg:w="163"/><text x="96.3609%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,serde_json::value::Value&gt;&gt;&gt; (2,811 samples, 1.75%)</title><rect x="94.8966%" y="213" width="1.7514%" height="15" fill="rgb(210,6,40)" fg:x="152311" fg:w="2811"/><text x="94.9266%" y="223.50">core::ptr::drop_in_pla..</text></g><g><title>mi_free (346 samples, 0.22%)</title><rect x="96.4324%" y="197" width="0.2156%" height="15" fill="rgb(212,48,18)" fg:x="154776" fg:w="346"/><text x="96.4624%" y="207.50">m..</text></g><g><title>_mi_page_retire (26 samples, 0.02%)</title><rect x="97.0854%" y="181" width="0.0162%" height="15" fill="rgb(230,214,11)" fg:x="155824" fg:w="26"/><text x="97.1154%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (17 samples, 0.01%)</title><rect x="97.1240%" y="165" width="0.0106%" height="15" fill="rgb(254,105,39)" fg:x="155886" fg:w="17"/><text x="97.1540%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (287 samples, 0.18%)</title><rect x="97.1016%" y="181" width="0.1788%" height="15" fill="rgb(245,158,5)" fg:x="155850" fg:w="287"/><text x="97.1316%" y="191.50"></text></g><g><title>mi_free (234 samples, 0.15%)</title><rect x="97.1346%" y="165" width="0.1458%" height="15" fill="rgb(249,208,11)" fg:x="155903" fg:w="234"/><text x="97.1646%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsonschema::output::OutputUnit&lt;jsonschema::output::Annotations&gt;&gt; (1,704 samples, 1.06%)</title><rect x="96.6792%" y="197" width="1.0617%" height="15" fill="rgb(210,39,28)" fg:x="155172" fg:w="1704"/><text x="96.7092%" y="207.50">core::ptr::d..</text></g><g><title>mi_free (739 samples, 0.46%)</title><rect x="97.2804%" y="181" width="0.4604%" height="15" fill="rgb(211,56,53)" fg:x="156137" fg:w="739"/><text x="97.3104%" y="191.50">mi_f..</text></g><g><title>core::ptr::drop_in_place&lt;jsonschema::output::BasicOutput&gt; (1,755 samples, 1.09%)</title><rect x="96.6480%" y="213" width="1.0934%" height="15" fill="rgb(226,201,30)" fg:x="155122" fg:w="1755"/><text x="96.6780%" y="223.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (44 samples, 0.03%)</title><rect x="97.7415%" y="213" width="0.0274%" height="15" fill="rgb(239,101,34)" fg:x="156877" fg:w="44"/><text x="97.7715%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (224 samples, 0.14%)</title><rect x="97.7689%" y="213" width="0.1396%" height="15" fill="rgb(226,209,5)" fg:x="156921" fg:w="224"/><text x="97.7989%" y="223.50"></text></g><g><title>core::str::converts::from_utf8 (1,711 samples, 1.07%)</title><rect x="97.9084%" y="213" width="1.0660%" height="15" fill="rgb(250,105,47)" fg:x="157145" fg:w="1711"/><text x="97.9384%" y="223.50">core::str::co..</text></g><g><title>mi_free (60 samples, 0.04%)</title><rect x="98.9745%" y="213" width="0.0374%" height="15" fill="rgb(230,72,3)" fg:x="158856" fg:w="60"/><text x="99.0045%" y="223.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9,557 samples, 5.95%)</title><rect x="93.7247%" y="325" width="5.9544%" height="15" fill="rgb(232,218,39)" fg:x="150430" fg:w="9557"/><text x="93.7547%" y="335.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (9,557 samples, 5.95%)</title><rect x="93.7247%" y="309" width="5.9544%" height="15" fill="rgb(248,166,6)" fg:x="150430" fg:w="9557"/><text x="93.7547%" y="319.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9,557 samples, 5.95%)</title><rect x="93.7247%" y="293" width="5.9544%" height="15" fill="rgb(247,89,20)" fg:x="150430" fg:w="9557"/><text x="93.7547%" y="303.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (9,556 samples, 5.95%)</title><rect x="93.7253%" y="277" width="5.9538%" height="15" fill="rgb(248,130,54)" fg:x="150431" fg:w="9556"/><text x="93.7553%" y="287.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9,556 samples, 5.95%)</title><rect x="93.7253%" y="261" width="5.9538%" height="15" fill="rgb(234,196,4)" fg:x="150431" fg:w="9556"/><text x="93.7553%" y="271.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (9,556 samples, 5.95%)</title><rect x="93.7253%" y="245" width="5.9538%" height="15" fill="rgb(250,143,31)" fg:x="150431" fg:w="9556"/><text x="93.7553%" y="255.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9,555 samples, 5.95%)</title><rect x="93.7259%" y="229" width="5.9532%" height="15" fill="rgb(211,110,34)" fg:x="150432" fg:w="9555"/><text x="93.7559%" y="239.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>mi_malloc (1,071 samples, 0.67%)</title><rect x="99.0119%" y="213" width="0.6673%" height="15" fill="rgb(215,124,48)" fg:x="158916" fg:w="1071"/><text x="99.0419%" y="223.50">mi_mall..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9,560 samples, 5.96%)</title><rect x="93.7247%" y="357" width="5.9563%" height="15" fill="rgb(216,46,13)" fg:x="150430" fg:w="9560"/><text x="93.7547%" y="367.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context::{{closure}} (9,560 samples, 5.96%)</title><rect x="93.7247%" y="341" width="5.9563%" height="15" fill="rgb(205,184,25)" fg:x="150430" fg:w="9560"/><text x="93.7547%" y="351.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (9,562 samples, 5.96%)</title><rect x="93.7247%" y="373" width="5.9576%" height="15" fill="rgb(228,1,10)" fg:x="150430" fg:w="9562"/><text x="93.7547%" y="383.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>__sched_yield (17 samples, 0.01%)</title><rect x="99.6822%" y="373" width="0.0106%" height="15" fill="rgb(213,116,27)" fg:x="159992" fg:w="17"/><text x="99.7122%" y="383.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="99.6822%" y="357" width="0.0106%" height="15" fill="rgb(241,95,50)" fg:x="159992" fg:w="17"/><text x="99.7122%" y="367.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (33 samples, 0.02%)</title><rect x="99.6947%" y="373" width="0.0206%" height="15" fill="rgb(238,48,32)" fg:x="160012" fg:w="33"/><text x="99.7247%" y="383.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (33 samples, 0.02%)</title><rect x="99.6947%" y="357" width="0.0206%" height="15" fill="rgb(235,113,49)" fg:x="160012" fg:w="33"/><text x="99.7247%" y="367.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="99.6947%" y="341" width="0.0206%" height="15" fill="rgb(205,127,43)" fg:x="160012" fg:w="33"/><text x="99.7247%" y="351.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="99.6947%" y="325" width="0.0206%" height="15" fill="rgb(250,162,2)" fg:x="160012" fg:w="33"/><text x="99.7247%" y="335.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="99.6947%" y="309" width="0.0206%" height="15" fill="rgb(220,13,41)" fg:x="160012" fg:w="33"/><text x="99.7247%" y="319.50"></text></g><g><title>[unknown] (32 samples, 0.02%)</title><rect x="99.6953%" y="293" width="0.0199%" height="15" fill="rgb(249,221,25)" fg:x="160013" fg:w="32"/><text x="99.7253%" y="303.50"></text></g><g><title>[unknown] (32 samples, 0.02%)</title><rect x="99.6953%" y="277" width="0.0199%" height="15" fill="rgb(215,208,19)" fg:x="160013" fg:w="32"/><text x="99.7253%" y="287.50"></text></g><g><title>[unknown] (32 samples, 0.02%)</title><rect x="99.6953%" y="261" width="0.0199%" height="15" fill="rgb(236,175,2)" fg:x="160013" fg:w="32"/><text x="99.7253%" y="271.50"></text></g><g><title>[unknown] (32 samples, 0.02%)</title><rect x="99.6953%" y="245" width="0.0199%" height="15" fill="rgb(241,52,2)" fg:x="160013" fg:w="32"/><text x="99.7253%" y="255.50"></text></g><g><title>[unknown] (32 samples, 0.02%)</title><rect x="99.6953%" y="229" width="0.0199%" height="15" fill="rgb(248,140,14)" fg:x="160013" fg:w="32"/><text x="99.7253%" y="239.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="99.6966%" y="213" width="0.0187%" height="15" fill="rgb(253,22,42)" fg:x="160015" fg:w="30"/><text x="99.7266%" y="223.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="99.6972%" y="197" width="0.0181%" height="15" fill="rgb(234,61,47)" fg:x="160016" fg:w="29"/><text x="99.7272%" y="207.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="99.6991%" y="181" width="0.0162%" height="15" fill="rgb(208,226,15)" fg:x="160019" fg:w="26"/><text x="99.7291%" y="191.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="99.6997%" y="165" width="0.0156%" height="15" fill="rgb(217,221,4)" fg:x="160020" fg:w="25"/><text x="99.7297%" y="175.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="99.7003%" y="149" width="0.0150%" height="15" fill="rgb(212,174,34)" fg:x="160021" fg:w="24"/><text x="99.7303%" y="159.50"></text></g><g><title>[unknown] (24 samples, 0.01%)</title><rect x="99.7003%" y="133" width="0.0150%" height="15" fill="rgb(253,83,4)" fg:x="160021" fg:w="24"/><text x="99.7303%" y="143.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (9,625 samples, 6.00%)</title><rect x="93.7234%" y="421" width="5.9968%" height="15" fill="rgb(250,195,49)" fg:x="150428" fg:w="9625"/><text x="93.7534%" y="431.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,624 samples, 6.00%)</title><rect x="93.7241%" y="405" width="5.9962%" height="15" fill="rgb(241,192,25)" fg:x="150429" fg:w="9624"/><text x="93.7541%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (9,624 samples, 6.00%)</title><rect x="93.7241%" y="389" width="5.9962%" height="15" fill="rgb(208,124,10)" fg:x="150429" fg:w="9624"/><text x="93.7541%" y="399.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>__clone (9,644 samples, 6.01%)</title><rect x="93.7129%" y="469" width="6.0086%" height="15" fill="rgb(222,33,0)" fg:x="150411" fg:w="9644"/><text x="93.7429%" y="479.50">__clone</text></g><g><title>start_thread (9,627 samples, 6.00%)</title><rect x="93.7234%" y="453" width="5.9981%" height="15" fill="rgb(234,209,28)" fg:x="150428" fg:w="9627"/><text x="93.7534%" y="463.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9,627 samples, 6.00%)</title><rect x="93.7234%" y="437" width="5.9981%" height="15" fill="rgb(224,11,23)" fg:x="150428" fg:w="9627"/><text x="93.7534%" y="447.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>_fini (282 samples, 0.18%)</title><rect x="99.7290%" y="469" width="0.1757%" height="15" fill="rgb(232,99,1)" fg:x="160067" fg:w="282"/><text x="99.7590%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (282 samples, 0.18%)</title><rect x="99.7290%" y="453" width="0.1757%" height="15" fill="rgb(237,95,45)" fg:x="160067" fg:w="282"/><text x="99.7590%" y="463.50"></text></g><g><title>_mi_heap_realloc_zero (37 samples, 0.02%)</title><rect x="99.9047%" y="469" width="0.0231%" height="15" fill="rgb(208,109,11)" fg:x="160349" fg:w="37"/><text x="99.9347%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (23 samples, 0.01%)</title><rect x="99.9358%" y="469" width="0.0143%" height="15" fill="rgb(216,190,48)" fg:x="160399" fg:w="23"/><text x="99.9658%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;mio::event::event::Event as core::fmt::Debug&gt;::fmt::EventDetails&gt; (20 samples, 0.01%)</title><rect x="99.9558%" y="469" width="0.0125%" height="15" fill="rgb(251,171,36)" fg:x="160431" fg:w="20"/><text x="99.9858%" y="479.50"></text></g><g><title>all (160,502 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(230,62,22)" fg:x="0" fg:w="160502"/><text x="0.0300%" y="511.50"></text></g><g><title>qsvlite (160,497 samples, 100.00%)</title><rect x="0.0031%" y="485" width="99.9969%" height="15" fill="rgb(225,114,35)" fg:x="5" fg:w="160497"/><text x="0.0331%" y="495.50">qsvlite</text></g></svg></svg>